[
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Restrict Requirement",
        "category": "Add Restriction",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case(string: str, index: int) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Only flip the case for characters at indices which are multiples of the provided index.\"\"\"\n\n    \"\"\">>> flip_case('Hello', 2)\n    'HeLlO'\n    \"\"\"\n  \nNote: If the index provided is 2, only the characters at the 2nd, 4th, 6th positions and so on will have their cases flipped.",
        "perturbed_answer": "def gold_solution(string: str, index: int) -> str:\n    \"\"\"\n    Flips the case of characters in a string at positions which are multiples of the provided index.\n    Indexing starts from 0, but the first index is ignored.\n    \"\"\"\n    new_string = \"\"\n    for i, char in enumerate(string):\n        # Check if the position is a multiple of the index and not the first character\n        if i != 0 and i % index == 0:\n            new_string += char.swapcase()\n        else:\n            new_string += char\n    return new_string",
        "test_input": "test_case1: ('handy CAM', 3)\ntest_case2: ('handy is CaM', 1)\ntest_case3: ('Hello', 5)\ntest_case4: ('AnElephant', 4)\ntest_case5: ('@123abC', 2)\ntest_case6: ('Special#TestCase', 3)\ntest_case7: ('MuLtiple    Spaces', 5)\ntest_case8: ('', 1)",
        "test_output": "test_case1: 'hanDy cAM'\ntest_case2: 'hANDY IS cAm'\ntest_case3: 'Hello'\ntest_case4: 'AnElEphaNt'\ntest_case5: '@123Abc'\ntest_case6: 'SpeCiaL#TEstcasE'\ntest_case7: 'MuLtiPle    SpaCes'\ntest_case8: ''\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Further Requirement",
        "category": "Subsequent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case_count(string: str) -> Tuple[str, int]:\n\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Additionally, return the number of case flips performed.\n\n    >>> flip_case_count('Hello')\n    ('hELLO', 5)\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string: str):\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    Additionally, return the number of case flips performed.\n    \"\"\"\n    flipped = ''\n    count = 0\n    for char in string:\n        if char.islower():\n            flipped += char.upper()\n            count += 1\n        elif char.isupper():\n            flipped += char.lower()\n            count += 1\n        else:\n            flipped += char\n    return flipped, count",
        "test_input": "test_case1: ['handy CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']\ntest_case8: ['']",
        "test_output": "test_case1: ('HANDY cam', 8)\ntest_case2: ('HANDY IS cAm', 10)\ntest_case3: ('hELLO', 5)\ntest_case4: ('aNeLEPHANT', 10)\ntest_case5: ('@123ABc', 3)\ntest_case6: ('sPECIAL#tESTcASE', 15)\ntest_case7: ('mUlTIPLE    sPACES', 14)\ntest_case8: ('', 0)\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Parallel Requirement",
        "category": "Concurrent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case_and_count(string: str) -> Tuple[str, int]:\n\n    \"\"\"For a given string, not only should you flip lowercase characters to uppercase and uppercase to lowercase. You should also output another Title case where only the first letter of each word is capitalized\"\"\"\n\n    \"\"\">>> flip_case_and_count('Hello')\n    ('hELLO', 'Hello')\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string: str):\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    Additionally, output another string in Title case where only the first letter of each word is capitalized.\n    \"\"\"\n    flipped = ''\n    for char in string:\n        if char.islower():\n            flipped += char.upper()\n        elif char.isupper():\n            flipped += char.lower()\n        else:\n            flipped += char\n\n    title_case = string.title()\n    return flipped, title_case",
        "test_input": "test_case1: ['handy CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']\ntest_case8: ['']",
        "test_output": "test_case1: ('HANDY cam', 'Handy Cam')\ntest_case2: ('HANDY IS cAm', 'Handy Is Cam')\ntest_case3: ('hELLO', 'Hello')\ntest_case4: ('aNeLEPHANT', 'Anelephant')\ntest_case5: ('@123ABc', '@123Abc')\ntest_case6: ('sPECIAL#tESTcASE', 'Special#Testcase')\ntest_case7: ('mUlTIPLE    sPACES', 'Multiple    Spaces')\ntest_case8: ('', '')\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Remove Constraint",
        "category": "Remove Constraint",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def change_case(string: str) -> str:\n\n    \"\"\"For a given string, convert all uppercase characters to lowercase.\"\"\"\n\n    \"\"\">>> change_case('Hello')\n    'hello'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string: str) -> str:\n    \"\"\"\n    For a given string, convert all uppercase characters to lowercase.\n    \"\"\"\n    return string.lower()",
        "test_input": "test_case1: ['HANDY CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['HELLO']\ntest_case4: ['ANELEPHANT']\ntest_case5: ['@123ABC']\ntest_case6: ['SPECIAL#TESTCASE']\ntest_case7: ['MULTIPLE    SPACES']",
        "test_output": "test_case1: 'handy cam'\ntest_case2: 'handy is cam'\ntest_case3: 'hello'\ntest_case4: 'anelephant'\ntest_case5: '@123abc'\ntest_case6: 'special#testcase'\ntest_case7: 'multiple    spaces'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Helper Function",
        "category": "Partial Solution",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below using helper function",
        "perturbed_question": "def helper_function(char: str) -> str:\n    \"\"\"Checks if a given character is uppercase or lowercase, and flips its case.\"\"\"\n\n    if char.isupper():\n        return char.lower()\n    elif char.islower():\n        return char.upper()\n    else:\n        return char\n\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase by using the helper function above to achieve the requirement\"\"\"\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "perturbed_answer": "Check if solution uses the helper function.\n\ndef solution(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase\n    by using the helper function above to achieve the requirement.\n    \"\"\"\n    return ''.join(helper_function(char) for char in string)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Change Docstring",
        "category": "Change Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def swap_case(string: str) -> str:\n\n    \"\"\"For the given string, convert all the vowels to lowercase and the first letter consonant in each word to upper case, the subsequent consonants should also be lower case\"\"\"\n\n    \"\"\">>> swap_case('hello world')\n    'Hello World'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    new_word = True  # Flag to indicate the start of a new word\n\n    for char in string:\n        if char.lower() in vowels:\n            result += char.lower()\n        else:\n            if new_word:\n                result += char.upper()\n                new_word = False\n            else:\n                result += char.lower()\n\n        if char == ' ':\n            new_word = True  # Reset the flag if the character is a space\n    \n    return result",
        "test_input": "test_case1: ['Handy CAM']\ntest_case2: ['Handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']",
        "test_output": "test_case1: 'Handy Cam'\ntest_case2: 'Handy iS Cam'\ntest_case3: 'Hello'\ntest_case4: 'aNelephant'\ntest_case5: '@123abc'\ntest_case6: 'Special#testcase'\ntest_case7: 'Multiple    Spaces'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Example Detail",
        "category": "Detail Expansion",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    >>> flip_case('Hello')\n    'hELLO'\nExplanation: For 'Hello World', the conversion process goes as follows:\n'H' (uppercase) becomes 'h' (lowercase).\n'e' (lowercase) becomes 'E' (uppercase).\n'l' (lowercase) becomes 'L' (uppercase).\n'l' (lowercase) becomes 'L' (uppercase).\n'o' (lowercase) becomes 'O' (uppercase).\n' ' (space) remains ' ' (unchanged, as spaces do not have case).\n'W' (uppercase) becomes 'w' (lowercase).\n'o' (lowercase) becomes 'O' (uppercase).\n'r' (lowercase) becomes 'R' (uppercase).\n'l' (lowercase) becomes 'L' (uppercase).\n'd' (lowercase) becomes 'D' (uppercase).\"\"\"",
        "perturbed_answer": "def gold_solution(string: str) -> str:\n\n    return string.swapcase()\n",
        "test_input": "test_case1: ['handy CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']",
        "test_output": "test_case1: 'HANDY cam'\ntest_case2: 'HANDY IS cAm'\ntest_case3: 'hELLO'\ntest_case4: 'aNeLEPHANT'\ntest_case5: '@123ABc'\ntest_case6: 'sPECIAL#tESTcASE'\ntest_case7: 'mUlTIPLE    sPACES'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Parameter Content",
        "category": "Change Value",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def swap_case(sentence: str) -> str:\n\n    \"\"\"For the given string, convert it to camel case. The first letter of the first word is in lowercase, and only the first letter of each subsequent word is capitalized. and the spaces should be removed\"\"\"\n\n    \"\"\">>> swap_case('Hello World')\n    'helloWorld'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(sentence: str) -> str:\n    words = sentence.split()\n    if not words:\n        return \"\"\n    \n    # Convert the first word to lowercase\n    words[0] = words[0][0].lower() + words[0][1:]\n\n    # For each remaining word, capitalize only the first letter and keep the rest as is\n    for i in range(1, len(words)):\n        if words[i]:  # Check if the word is not empty\n            words[i] = words[i][0].upper() + words[i][1:]\n\n    # Join all the words without spaces\n    return ''.join(words)",
        "test_input": "test_case1: ['Hello World']\ntest_case2: ['handy CAM']\ntest_case3: ['handy is CaM']\ntest_case4: ['Hello']\ntest_case5: ['AnElephant']\ntest_case6: ['@123abC']\ntest_case7: ['Special#TestCase']\ntest_case8: ['MuLtiple    Spaces']",
        "test_output": "test_case1: 'helloWorld'\ntest_case2: 'handyCAM'\ntest_case3: 'handyIsCaM'\ntest_case4: 'hello'\ntest_case5: 'anElephant'\ntest_case6: '@123abC'\ntest_case7: 'special#TestCase'\ntest_case8: 'muLtipleSpaces'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Variable Type",
        "category": "Change Operation",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case(list_of_strings: List[str]) -> List[str]:\n\n    \"\"\"For a given list of strings, flip lowercase characters to uppercase and uppercase to lowercase in each string.\"\"\"\n\n    \"\"\">>> flip_case(['Hello', 'World'])\n    ['hELLO', 'wORLD']\n    \"\"\"",
        "perturbed_answer": "def gold_solution(list_of_strings: list[str]) -> list[str]:\n    flipped_list = []\n\n    for s in list_of_strings:\n        flipped_string = ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n        flipped_list.append(flipped_string)\n\n    return flipped_list",
        "test_input": "test_case1: [['handy CAM', 'handy is CaM', 'Hello', 'AnElephant', '@123abC', 'Special#TestCase', 'MuLtiple    Spaces', '']]",
        "test_output": "test_case1: ['HANDY cam', 'HANDY IS cAm', 'hELLO', 'aNeLEPHANT', '@123ABc', 'sPECIAL#tESTcASE', 'mUlTIPLE    sPACES', '']\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Info Recombination",
        "category": "Info Recombination",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case_and_odd_sum(string: str) -> tuple:\n    \"\"\"\n    Given a string, flip lowercase characters to uppercase and uppercase to lowercase.\n    Also return the odd letters that are in even positions of the original string.\n    string Index starts from 0, alphabet index start from 1. Aa is 1, Bb is 2..\n    Examples:\n    >>> flip_case_and_odd_sum('Hello')\n    ('hELLO', 'o')\n    \"\"\"\n    ",
        "perturbed_answer": "def gold_solution(string: str) -> tuple:\n    def is_odd_letter(char):\n        return (ord(char.upper()) - ord('A') + 1) % 2 != 0\n    \n    flipped_string = ''\n    odd_letters_even_positions = ''\n    \n    for i, char in enumerate(string):\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n        \n        # Correcting the condition for even positions\n        if i % 2 == 0 and is_odd_letter(char):\n            odd_letters_even_positions += char\n    \n    return (flipped_string, odd_letters_even_positions)",
        "test_input": "test_case1: ['handy CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']",
        "test_output": "test_case1: ('HANDY cam', 'yCM')\ntest_case2: ('HANDY IS cAm', 'yia')\ntest_case3: ('hELLO', 'o')\ntest_case4: ('aNeLEPHANT', 'AEe')\ntest_case5: ('@123ABc', 'aC')\ntest_case6: ('sPECIAL#tESTcASE', 'SeisCs')\ntest_case7: ('mUlTIPLE    sPACES', 'MiSae')\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Variable Range",
        "category": "Identify Range",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "If the below program only take lower case letters, what are possible output from the function?",
        "perturbed_question": "\ndef function(string: str) -> str:\n\n    return string.swapcase()\n",
        "perturbed_answer": "Only uppercase letters",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Variable Substitution",
        "category": "Variable Group",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case(string: str, specific_value: str) -> str:\n\n    \"\"\"For a given string and specific value, flip the specific value from lowercase to uppercase or uppercase to lowercase.  The function will only flip the case of the specific value in the string.\"\"\"\n\n    \"\"\">>> flip_case('Hello', 'h')\n    'hello'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string: str, specific_value: str) -> str:\n    # Convert the string into a list of characters for easier manipulation\n    chars = list(string)\n    \n    # Iterate through the characters and flip the case for matches\n    for i, char in enumerate(chars):\n        if char.lower() == specific_value.lower():\n            chars[i] = char.swapcase()\n\n    # Join the characters back into a string\n    return ''.join(chars)",
        "test_input": "test_case1: ['Hello', 'h']\ntest_case2: ['handy CAM', 'c']\ntest_case3: ['handy is CaM', 'm']\ntest_case4: ['AnElephant', 'e']\ntest_case5: ['@123abC', 'c']\ntest_case6: ['Special#TestCase', 's']\ntest_case7: ['MuLtiple    Spaces', 's']",
        "test_output": "test_case1: 'hello'\ntest_case2: 'handy cAM'\ntest_case3: 'handy is Cam'\ntest_case4: 'AnelEphant'\ntest_case5: '@123abc'\ntest_case6: 'special#TeStCaSe'\ntest_case7: 'MuLtiple    spaceS'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "WhatIf Code",
        "category": "What If",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the `changed_function`, if the input is the same.",
        "perturbed_question": "We know that if we input masked_input to the `original_function`, the output is following:\n\"\"\">>> original_function(masked_input)\n'hELLO'\n\"\"\"\nHere is the `original_function`:\ndef original_function(string: str) -> str:\n    return string.swapcase()\n\n\nHere is the `changed_function`:\ndef changed_function(string: str) -> str:\n    return string.swapcase()[::-1]\n\nWhat will be the output for `changed_function(masked_input)`",
        "perturbed_answer": "Reasoning Step: The `swapcase()` method in python is used to swap the case of the string. In the case of the `original_function` method, it receives a string and returns the string but with all the lower case letters converted to upper case and vice versa. The `changed_function`, on the other hand, additionally reverses the string that is output by the swapcase function, indicated by `[::-1]`.\n\nFor `original_function(masked_input)`, we know that the output is 'hELLO'. So the `masked_input` should be the reverse case of 'hELLO', that is 'Hello'.\n\nSo, given that the `masked_input` is 'Hello', the `changed_function` will first swap the case to get 'hELLO'. After that, it will reverse this string, thus giving us 'OLLEh'.\n\nAnswer: 'OLLEh'",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Generalize Parameter",
        "category": "Computation Demand",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case(input_obj: Union[str, List[str], Dict[Any, str]]):\n\n    \"\"\"\n    For a given input - that could be a string, a list of strings, a dictionary where the values are strings - flip all the lowercase characters inside to uppercase and uppercase to lowercase.\n    For example:\n\n    >>> flip_case('Hello')\n    'hELLO'\n    \n    >>> flip_case(['Hello', 'WORLD'])\n    ['hELLO', 'world']\n    \n    >>> flip_case({'first_word': 'Hello', 'second_word': 'WORLD'})\n    {'first_word': 'hELLO', 'second_word': 'world'}\n  \n    \"\"\"\n",
        "perturbed_answer": "def gold_solution(input_obj: Union[str, List[str], Dict[Any, str]]):\n    # Function to flip the case of a single string\n    def flip_string(s: str) -> str:\n        return s.swapcase()\n\n    # If input is a string, directly apply the flipping\n    if isinstance(input_obj, str):\n        return flip_string(input_obj)\n\n    # If input is a list, apply flipping to each element\n    elif isinstance(input_obj, list):\n        return [flip_string(item) for item in input_obj]\n\n    # If input is a dictionary, apply flipping to each value\n    elif isinstance(input_obj, dict):\n        return {key: flip_string(value) for key, value in input_obj.items()}",
        "test_input": "test_case1: [['Hello', 'WORLD']]\ntest_case2: [{'first_word': 'Hello', 'second_word': 'WORLD'}]\ntest_case3: ['handy CAM']\ntest_case4: ['handy is CaM']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']\ntest_case8: [['AnElephant', 'MuLtiple    Spaces', 'Special#TestCase']]",
        "test_output": "test_case1: ['hELLO', 'world']\ntest_case2: {'first_word': 'hELLO', 'second_word': 'world'}\ntest_case3: 'HANDY cam'\ntest_case4: 'HANDY IS cAm'\ntest_case5: '@123ABc'\ntest_case6: 'sPECIAL#tESTcASE'\ntest_case7: 'mUlTIPLE    sPACES'\ntest_case8: ['aNeLEPHANT', 'mUlTIPLE    sPACES', 'sPECIAL#tESTcASE']\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Higher Order",
        "category": "General Solution",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_string_case(s, num_flip):\n    \"\"\"\n    Flip the case of each character in a string 's' based on the numbers in the list 'num_flip'. Each number in 'num_flip' tells how many times to flip the case of the character in the same position in 's'.\n    \n    Example:\n    >>> flip_string_case(\"Hello\", [1, 0, 1, 0, 1])\n    'hEllo'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(s: str, num_flip: list) -> str:\n    # Flip the case of each character in the string as per num_flip list\n    flipped_string = \"\"\n    for char, flips in zip(s, num_flip):\n        if flips % 2 == 1:\n            char = char.swapcase()\n        flipped_string += char\n\n    return flipped_string",
        "test_input": "test_case1: [\"Hello\", [1, 0, 1, 0, 1]]\ntest_case2: [\"handy CAM\", [0, 1, 0, 1, 0, 1, 0, 1, 0]]\ntest_case3: [\"AnElephant\", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\ntest_case4: [\"@123abC\", [0, 0, 0, 1, 1, 1, 1]]\ntest_case5: [\"Special#TestCase\", [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0]]\ntest_case6: [\"MuLtiple    Spaces\", [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0]]\ntest_case7: [\"handy is CaM\", [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1]]",
        "test_output": "test_case1: 'heLlO'\ntest_case2: 'hAnDy CaM'\ntest_case3: 'aNeLEPHANT'\ntest_case4: '@123ABc'\ntest_case5: 'spEcial#TEsTCAs'\ntest_case6: 'multIple    spAcEs'\ntest_case7: 'hAndy Is CA'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Solution Plan",
        "category": "Solution Plan",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case(string: str) -> str:\n    \"\"\"\n    Inverts the case of each character in the provided string.\n\n    This function takes a string as an argument and returns a new string with each character's case inverted. \n    Uppercase letters are converted to lowercase, and lowercase letters are converted to uppercase.\n\n    Solution Plan:\n    1. Create a result variable to hold the updated string.\n    2. Iterate through each character in the string.\n    3. Check if the character is uppercase; if so, convert it to lowercase and add it to the result.\n    4. If the character is lowercase, convert it to uppercase and add it to the result.\n    5. After iterating through all characters, return the result.\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string: str) -> str:\n\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result",
        "test_input": "test_case1: ['handy CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']",
        "test_output": "test_case1: 'HANDY cam'\ntest_case2: 'HANDY IS cAm'\ntest_case3: 'hELLO'\ntest_case4: 'aNeLEPHANT'\ntest_case5: '@123ABc'\ntest_case6: 'sPECIAL#tESTcASE'\ntest_case7: 'mUlTIPLE    sPACES'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Code Execution",
        "category": "Symbolic Response",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the following function description, if the input is:string = \"Hello World!&7\"",
        "perturbed_question": "\n\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n",
        "perturbed_answer": "\"hELLO wORLD!&7\"",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Realworld Usecase",
        "category": "Setting Rephrase",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def switch_text_case(text: str) -> str:\n\n    \"\"\"\n    Imagine you're working on a document and you've mistaken the case in the text you write. You wrote all the lower case letters in uppercase and vice versa, suppose you want to correct all of them using python. \n    \"\"\"",
        "perturbed_answer": "def gold_solution(string: str) -> str:\n\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result",
        "test_input": "test_case1: ['HANDY CAM']\ntest_case2: ['HANDY IS cAM']\ntest_case3: ['hELLO']\ntest_case4: ['aNeLePhAnT']\ntest_case5: ['@123ABc']\ntest_case6: ['sPECIAL#tESTcASE']\ntest_case7: ['mUlTiPlE    sPaCeS']",
        "test_output": "test_case1: 'handy cam'\ntest_case2: 'handy is Cam'\ntest_case3: 'Hello'\ntest_case4: 'AnElEpHaNt'\ntest_case5: '@123abC'\ntest_case6: 'Special#TestCase'\ntest_case7: 'MuLtIpLe    SpAcEs'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Reduce Complexity",
        "category": "Optimize Solution",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Optimize the function below to more efficiently to achieve the goal: \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"?",
        "perturbed_question": "\ndef switch_case(s: str) -> str:\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n\n    return result\n\n\n\n",
        "perturbed_answer": "def flip_case(string: str) -> str:\n\n    return string.swapcase()",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Code Complexity",
        "category": "Cost Analysis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Analyze the time and space complexity regarding to input parameter string of the following function.",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n\n    return string.swapcase()\n",
        "perturbed_answer": "Time Complexity: O(n), Space complexity: O(n)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Identical Code",
        "category": "Identical Solution",
        "dimension": "Pairwise Comparison",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Is function_1 and function_2 identical in terms of its functionality?",
        "perturbed_question": "\ndef function_1(string: str) -> str: # flip the case\n    return string.swapcase()\ndef function_2(s: str) -> str: # flip the case\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n\n    return result",
        "perturbed_answer": "No. function_2 does not include non-character",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Parameter Relationship",
        "category": "Value Relationship",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Categorize the all the possible input parameters of the following function into groups, if the output is 'hELLO 99'",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    return string.swapcase()\n",
        "perturbed_answer": "Hello 99",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Introduce Bias",
        "category": "Add Misinformation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef uppercase(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('hello')\n    'HELLO'\n    \"\"\"\n\n",
        "perturbed_answer": "\ndef gold_solution(string: str) -> str:\n\n\n\n\n    return string.swapcase()",
        "test_input": "test_case1: ['handy CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']",
        "test_output": "test_case1: 'HANDY cam'\ntest_case2: 'HANDY IS cAm'\ntest_case3: 'hELLO'\ntest_case4: 'aNeLEPHANT'\ntest_case5: '@123ABc'\ntest_case6: 'sPECIAL#tESTcASE'\ntest_case7: 'mUlTIPLE    sPACES'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Test Case",
        "category": "Inherent Premise",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Provide input parameters for the test cases of the specified coding problem. These parameters should encompass boundary conditions within the scope defined by the function's requirements specification, and avoid scenarios that fall outside of these requirements.",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"\n",
        "perturbed_answer": "test input should Include lowercase and uppercase, it should also include non character options",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Solve Input",
        "category": "Solve Value",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "What is input to the following function, if the output is: \"hELLO 9\"",
        "perturbed_question": "\n\ndef function(string: str) -> str:\n\n    return string.swapcase()",
        "perturbed_answer": "Hello 9",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Code Import",
        "category": "Domain Knowledge",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Rewrite the function below to take in batch input parameter and use the multicore cpu.",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n",
        "perturbed_answer": "import multiprocessing\n\ndef flip_case(strings: list) -> list:\n\n    \"\"\"For a given list of strings, flip lowercase characters to uppercase and uppercase to lowercase for each string.\"\"\"\n\n    # Define the function to be applied to each string\n    def flip(s):\n        return s.swapcase()\n\n    # Create a pool of worker processes\n    with multiprocessing.Pool() as pool:\n\n        # Apply the flip function to all strings in the list\n        results = pool.map(flip, strings)\n\n    return results",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "No Keyword",
        "category": "Reasoning Format",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Answer the coding function below without using the python keyword \"for\" in the solution\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "perturbed_answer": "def gold_solution(string: str):\n    return string.swapcase()\n",
        "test_input": "test_case1: ['handy CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']\ntest_case8: ['']",
        "test_output": "test_case1: 'HANDY cam'\ntest_case2: 'HANDY IS cAm'\ntest_case3: 'hELLO'\ntest_case4: 'aNeLEPHANT'\ntest_case5: '@123ABc'\ntest_case6: 'sPECIAL#tESTcASE'\ntest_case7: 'mUlTIPLE    sPACES'\ntest_case8: ''\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "X Language",
        "category": "Reasoning Style",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below in go",
        "perturbed_question": "func flipCase(str string) string {\n// flipCase takes a string and flips the case of each character: lowercase to uppercase and uppercase to lowercase.\n\n}\n",
        "perturbed_answer": "package main\n\nimport (\n        \"fmt\"\n        \"unicode\"\n)\n\nfunc flipCase(str string) string {\n        // Convert the string to a slice of runes to handle Unicode characters correctly\n        runes := []rune(str)\n        for i, r := range runes {\n                if unicode.IsLower(r) {\n                        // Convert to uppercase if the rune is lowercase\n                        runes[i] = unicode.ToUpper(r)\n                } else if unicode.IsUpper(r) {\n                        // Convert to lowercase if the rune is uppercase\n                        runes[i] = unicode.ToLower(r)\n                }\n        }\n        // Convert the slice of runes back to a string\n        return string(runes)\n}",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Simple Name",
        "category": "New Rule",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below and only use 6 letter word for each variable names inside the solution",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "perturbed_answer": "Any solution have 6 letter words as variables",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Step Necessity",
        "category": "Step Functionality",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Explain what is the the line below the comment functionality?",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    for char in string:\n\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            # Explain what is the line below doing?\n            result += char.upper()\n        # If neither, just add the character as it is\n        else:\n            result += char\n    return result",
        "perturbed_answer": "it is flipping the lowercase letters to uppercase letters inside the string",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Alternative Answer",
        "category": "Alternative Answer",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Find an alternative way to complete for the following coding question correctly, your solution should be different from #Completion#.",
        "perturbed_question": "\n#Coding question#:\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n#Completion#:\nreturn string.swapcase()",
        "perturbed_answer": "Find a different solution other than:\ndef flip_case(string: str) -> str:\n\n    return string.swapcase()",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Question Formulation",
        "category": "Question Formulation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Write a concise code description for the following code of its functionality no more than 1 sentence.",
        "perturbed_question": "\ndef function(string):\n    return string.swapcase()\n",
        "perturbed_answer": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Reverse Engineering",
        "category": "Backward Reasoning",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Create a function that reverses the following function's process, effectively transforming its output back into the original input\n",
        "perturbed_question": "def flip_case(string: str) -> str:\n\n    return string.swapcase()\n",
        "perturbed_answer": "def function(string: str) -> str:\n\n    return string.swapcase()\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Parameter Sequence",
        "category": "Change Sequence",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def vanilla_unicorn(unicorn_horn: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> vanilla_unicorn('Hello')\n    'hELLO'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(unicorn_horn: str) -> str:\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in unicorn_horn:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If uppercase, convert it to lowercase and append to the result\n            result += char.lower()\n        else:\n            # If lowercase or non-alphabetical character, convert it to uppercase and append to the result\n            result += char.upper()\n    \n    # Return the final result\n    return result",
        "test_input": "test_case1: ['handy CAM']\ntest_case2: ['handy is CaM']\ntest_case3: ['Hello']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']",
        "test_output": "test_case1: 'HANDY cam'\ntest_case2: 'HANDY IS cAm'\ntest_case3: 'hELLO'\ntest_case4: 'aNeLEPHANT'\ntest_case5: '@123ABc'\ntest_case6: 'sPECIAL#tESTcASE'\ntest_case7: 'mUlTIPLE    sPACES'\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Incomplete Answer",
        "category": "Complete Missing",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below by predicting what is inside the masked code paragraph",
        "perturbed_question": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    [masked code paragraph]\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    \n    return result",
        "perturbed_answer": "result = \"\"; for char in string:",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "True False",
        "category": "Close Format",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Evaluate whether the solution below is the correct solution for the coding question, True or False?",
        "perturbed_question": "Function:\n\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n\nSolution:\n\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If uppercase, convert it to lowercase and append to the result\n            result += char.lower()\n        elif char.lower():\n            # If lowercase, convert it to uppercase and append to the result\n            result += char.upper()\n    \n    # Return the final result\n    return result",
        "perturbed_answer": "FALSE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Incomplete Requirement",
        "category": "Conditional Analysis",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case(ch: str) -> str:\n\n    \"\"\"For a given string, all the letters inside the string should be changed. flip lowercase characters to uppercase.\"\"\"\n\n    \"\">>> flip_case('h')\n    'H'\n    \"\"\"",
        "perturbed_answer": "The requirement is incomplete",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Wrong Example",
        "category": "Conflicting Information",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def flip_case(string: str) -> str:\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hello'\n    \"\"\"",
        "perturbed_answer": "The example is wrong, it should be hELLO",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Runtime Error",
        "category": "Surface Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code\n",
        "perturbed_question": "def flip_case(string, str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()",
        "perturbed_answer": "string: str",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Logical Error",
        "category": "Hidden Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "\n\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    string = list(string.swapcase())\n    return string\n",
        "perturbed_answer": "remove list()",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Complex Docstring",
        "category": "Data Restructuring",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef function(string: str = None) -> str: \n\n    \"\"\"\n    For any specified sequence of alphabetical characters, interspersed with spaces, numerical digits, and various symbols, implement a sophisticated transformation algorithm designed to selectively convert  each alphabetical character from its current case representation, either lowercase or uppercase, to its diametrically opposite case representation. This algorithm ensures that every character initially presented in lowercase is meticulously transmuted to uppercase, and conversely, every character originally in uppercase is converted to lowercase, while meticulously preserving the integrity and original positioning of spaces, numerical digits, and any other non-alphabetical symbols, leaving these elements unaltered within the sequence.\n    >>> function('Hello')\n    'hELLO'\n    \"\"\"\n",
        "perturbed_answer": "\ndef gold_solution(string: str) -> str:\n    return string.swapcase()\n",
        "test_input": "test_case1: ['Hello']\ntest_case2: ['handy CAM']\ntest_case3: ['handy is CaM']\ntest_case4: ['AnElephant']\ntest_case5: ['@123abC']\ntest_case6: ['Special#TestCase']\ntest_case7: ['MuLtiple    Spaces']\ntest_case8: ['']",
        "test_output": "test_case1: 'hELLO'\ntest_case2: 'HANDY cam'\ntest_case3: 'HANDY IS cAm'\ntest_case4: 'aNeLEPHANT'\ntest_case5: '@123ABc'\ntest_case6: 'sPECIAL#tESTcASE'\ntest_case7: 'mUlTIPLE    sPACES'\ntest_case8: ''\n"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Theoretical Basis",
        "category": "Theoretical Basis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Please describe to me in simple terms, assuming I have no knowledge of programming. Your task isn't to solve the coding problem itself, but rather to identify the programming concepts in Python that would be necessary to address the problem presented below.",
        "perturbed_question": "def flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "perturbed_answer": "Depend on the answer",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Example Requirement",
        "category": "Seek Clarification",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Begin by analyzing the function's behavior specified in the docstring to understand its pattern, and then proceed to code the function accordingly.",
        "perturbed_question": "def flip_case(string: str) -> str:\n    \"\"\"\n   function('Hello') == 'hELLO'\nfunction('Python 3.8') == 'pYTHON 3.8'\nfunction('123abcXYZ') == '123ABCxyz'\nfunction('MixedCASE123') == 'mIXEDcase123'\nfunction('ALLUPPERCASE') == 'alluppercase'\n    \"\"\"",
        "perturbed_answer": "\ndef function(string: str) -> str: \n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    return string.swapcase()",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef flip_case(string: str) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    \"\"\">>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n\n\n    return string.swapcase()\n",
        "math_category": "Example Boundary",
        "category": "Complex Reality",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Write a function to fulfill all the test cases",
        "perturbed_question": "def flip_case(string) -> str:\n\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    test cases\n    >>> flip_case(['Hello', 'World'])\n    ['hELLO', 'wORLD']\n    >>> flip_case(None)\n    None\n    >>> flip_case('hELLo WorLD')\n    'HelLO wORld'\n    >>> flip_case('')\n    ''\n    >>> flip_case(123)\n    '123'\n    >>> flip_case('!!HELLO!!')\n    '!!hello!!'\n    \"\"\"\n",
        "perturbed_answer": "It should fulfill all the test cases",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Restrict Requirement",
        "category": "Add Restriction",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list, n: int):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    n is a non-negative integer which represents the order of the derivative.\n    Return the nth derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5], 1)\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3], 2)\n    [6]\n    \"\"\"",
        "perturbed_answer": "def gold_solution(xs, n):\n\n    # Iteratively compute the nth derivative\n    for _ in range(n):\n        # Each term is multiplied by its index (which represents its power)\n        # and reduce the list size by 1 (since the constant term is eliminated)\n        xs = [i * xs[i] for i in range(1, len(xs))]\n\n        # If the polynomial becomes a constant or empty, the remaining derivatives are 0\n        if len(xs) == 0:\n            return [0]\n\n    return xs",
        "test_input": "test_case1: [[3, 1, 2, 4, 5], 1]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5], 2]\ntest_case3: [[0, 0, 0], 0]\ntest_case4: [[-1, -2, -3], 3]\ntest_case5: [[1, 2], 1]\ntest_case6: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5]\ntest_case7: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 4]\ntest_case8: [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [5.0, 27.0, 66.0]\ntest_case3: [0, 0, 0]\ntest_case4: [0]\ntest_case5: [2]\ntest_case6: [720, 5040, 20160, 60480, 151200]\ntest_case7: [-120, -720, -2520, -6720, -15120, -30240]\ntest_case8: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Further Requirement",
        "category": "Subsequent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative_and_sum(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    Also, return value of the derivative at x=-3.\n    \"\"\"",
        "perturbed_answer": "def gold_solution(xs):\n    # Calculating the derivative\n    derivative = [i * xs[i] for i in range(1, len(xs))]\n\n    # Evaluating the derivative at x = -3\n    derivative_at_neg3 = sum(coef * (-3)**(i) for i, coef in enumerate(derivative))\n\n    return derivative, derivative_at_neg3",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[-1, 0, 1]]\ntest_case8: [[0, 1, 0]]",
        "test_output": "test_case1: ([1, 4, 12, 20], -443)\ntest_case2: ([1.5, 5.0, 13.5, 22.0], -486.0)\ntest_case3: ([0, 0], 0)\ntest_case4: ([-2, -6], 16)\ntest_case5: ([2], 2)\ntest_case6: ([], 0)\ntest_case7: ([0, 2], -6)\ntest_case8: ([1, 0], 1)\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Parallel Requirement",
        "category": "Concurrent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def parallel_derivative_and_integral(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative and definite integral of this polynomial in the same form.\n    Assume polynomial is integrated from 0.\n    \"\"\"\n\n    \"\"\"\n    For derivative:\n    >>> parallel_derivative_and_integral([3, 1, 2, 4, 5])[0]\n    [1, 4, 12, 20]\n    >>> parallel_derivative_and_integral([1, 2, 3])[0]\n    [2, 6]\n\n    For Definite integral:\n    >>> parallel_derivative_and_integral([3, 1, 2, 4, 5])[1]\n    [0, 3.0, 0.5, 0.66666, 1.0, 1.0]\n    >>> parallel_derivative_and_integral([1, 2, 3])[1]\n    [0, 1.0, 1.0, 1.0]\n    \"\"\"",
        "perturbed_answer": "def gold_solution(xs: list):\n    # Calculate the derivative\n    derivative = [i * xs[i] for i in range(1, len(xs))]\n    \n    # Calculate the integral\n    integral = [0]  # Start with the constant term, assumed to be 0 for definite integral from 0\n    for i in range(len(xs)):\n        integral.append(xs[i] / (i + 1))\n    \n    return derivative, integral",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: ([1, 4, 12, 20], [0, 3.0, 0.5, 0.6666666666666666, 1.0, 1.0])\ntest_case2: ([1.5, 5.0, 13.5, 22.0], [0, 3.5, 0.75, 0.8333333333333334, 1.125, 1.1])\ntest_case3: ([0, 0], [0, 0.0, 0.0, 0.0])\ntest_case4: ([-2, -6], [0, -1.0, -1.0, -1.0])\ntest_case5: ([2], [0, 1.0, 1.0])\ntest_case6: ([], [0, 1.0])\ntest_case7: ([], [0, 0.0])\ntest_case8: ([0, 2], [0, -1.0, 0.0, 0.3333333333333333])\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Remove Constraint",
        "category": "Remove Constraint",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def find_derivative(xs: list):\n\n    \"\"\" xs is a list with a length of 3, containing coefficients of a simple polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> find_derivative([3, 1])\n    [1]\n    >>> find_derivative([1, 2])\n    [2]\n    \"\"\"",
        "perturbed_answer": "def gold_solution(xs: list):\n    return [xs[1], 2 * xs[2]]",
        "test_input": "test_case1: [[3, 1, 2]]\ntest_case2: [[0, 0, 0]]\ntest_case3: [[-1, -2, -3]]\ntest_case4: [[1, 2, 3]]\ntest_case5: [[3.5, 1.5, 2.5]]\ntest_case6: [[0, 1, 2]]\ntest_case7: [[1, 0, 2]]\ntest_case8: [[2, 2, 2]]",
        "test_output": "test_case1: [1, 4]\ntest_case2: [0, 0]\ntest_case3: [-2, -6]\ntest_case4: [2, 6]\ntest_case5: [1.5, 5.0]\ntest_case6: [1, 4]\ntest_case7: [0, 4]\ntest_case8: [2, 4]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Helper Function",
        "category": "Partial Solution",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below using helper function",
        "perturbed_question": "def helper_function(coefficient: int, exp: int) -> int:\n    \"\"\" \n    This helper function calculates the derivative of a single term in the polynomial.\n    It multiplies the coefficient of the term by its exponent\n    \"\"\"\n    return coefficient * exp\n\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form. You should use the helper function above to achieve the requirement\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "perturbed_answer": "Check if solution uses helper function. def helper_function(coefficient: int, exp: int) -> int:\n    \"\"\"\n    This helper function calculates the derivative of a single term in the polynomial.\n    It multiplies the coefficient of the term by its exponent.\n    \"\"\"\n    return coefficient * exp\n\ndef gold_solution(xs: list) -> list:\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the derivative of this polynomial in the same form.\n    You should use the helper function above to achieve the requirement.\n    \n    Examples:\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # The derivative of a constant is 0, so skip the first coefficient (xs[0])\n    # Start with the coefficient of x (which is xs[1]) and its exponent (1)\n    return [helper_function(xs[i], i) for i in range(1, len(xs))]",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Change Docstring",
        "category": "Change Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def calc_derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] * (exp (x))^0 + xs[1] * (exp(x))^1 + xs[2] * (exp(x))^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\"\"\"",
        "perturbed_answer": "def gold_solution(xs: list):\n    \"\"\"\n    Calculate the derivative of a polynomial represented by its coefficients,\n    where each coefficient is multiplied by an increasing power of exp(x).\n    \"\"\"\n    # The derivative of each term is i * xs[i] * (e^x)^{i}, but since (e^x)^i\n    # remains unchanged in representation (because d/dx e^x = e^x),\n    # we only adjust the coefficients according to the power of e^x.\n    \n    # Initialize an empty list to store the coefficients of the derivative.\n    derivative_xs = []\n    \n    # Skip the first term as its derivative (a constant) is 0 and doesn't contribute to the result.\n    for i in range(1, len(xs)):\n        # Calculate the derivative of the term and append it to the derivative list.\n        derivative_coefficient = i * xs[i]\n        derivative_xs.append(derivative_coefficient)\n    \n    return derivative_xs",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: []\ntest_case7: []\ntest_case8: [0, 2]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Example Detail",
        "category": "Detail Expansion",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n\n    >>> derivative([3, 1, 2, 4, 5]) calculates the derivative as [1*1, 2*2, 3*4, 4*5] resulting in [1, 4, 12, 20].\n\n    >>> derivative([1, 2, 3]) calculates the derivative as [1*2, 2*3] resulting in [2, 6].\n    \"\"\"\n\n\n",
        "perturbed_answer": "\ndef gold_solution(xs: list):\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: []\ntest_case7: []\ntest_case8: [0, 2]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Parameter Content",
        "category": "Change Value",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(polynomial: str):\n\n    \"\"\" 'polynomial' is a string that stands for polynomial for form\n    coefficients_0 + coefficients_1 * x + coefficients_2 * x^2 + ....\n    This function will return the derivative of the aforementioned polynomial in the same format.\n\n    >>> derivative('3 +1x + 2x^2 + 4x^3 + 5x^4')\n    '1 + 4x + 12x^2 + 20x^3'\n    >>> derivative('1 - 2x + 3x^2')\n    '-2 + 6x'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(polynomial: str) -> str:\n    # Split the polynomial into terms.\n    terms = polynomial.replace(' ', '').replace('-', '+-').split('+')\n\n    \n    # List to hold derivative terms.\n    derivative_terms = []\n    \n    for term in terms:\n        # Split each term by 'x' to separate coefficient and power.\n        if 'x' in term:\n            parts = term.split('x')\n            coefficient = int(parts[0]) if parts[0] != '' else 1  # Handle the coefficient of 1.\n            power = int(parts[1][1:]) if len(parts) > 1 and parts[1] != '' else 1  # Extract power if present.\n            \n            # Apply the derivative rule.\n            if power > 1:\n                derivative_coefficient = coefficient * power\n                derivative_power = power - 1\n                derivative_terms.append(f'{derivative_coefficient}x^{derivative_power}')\n            elif power == 1:\n                derivative_terms.append(f'{coefficient}')\n        # No 'x' means it's a constant term, so its derivative is 0 and it's skipped.\n        \n    # Join the derivative terms into a single string.\n    derivative_polynomial = ' + '.join(derivative_terms)\n    return derivative_polynomial",
        "test_input": "test_case1: ['3 +1x + 2x^2 + 4x^3 + 5x^4']\ntest_case2: ['1 + 2x + 3x^2']\ntest_case3: ['3.5 +1.5x + 2.5x^2 + 4.5x^3 + 5.5x^4']\ntest_case4: ['0 + 0x + 0x^2']\ntest_case5: ['-1 -2x -3x^2']\ntest_case6: ['1 + 2x']\ntest_case7: ['1']\ntest_case8: ['-1 -2x']",
        "test_output": "test_case1: '1 + 4x^1 + 12x^2 + 20x^3'\ntest_case2: '2 + 6x^1'\ntest_case4: '0 + 0x^1'\ntest_case5: '-2 + -6x^1'\ntest_case6: '2'\ntest_case7: ''\ntest_case8: '-2'\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Variable Type",
        "category": "Change Operation",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list[str]) -> list[str]:\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n",
        "perturbed_answer": "def gold_solution(xs: list[str]) -> list[str]:\n    \"\"\"\n    Calculate the derivative of a polynomial represented by a list of string coefficients.\n    \n    Parameters:\n    - xs: list[str] - List of string coefficients representing a polynomial.\n    \n    Returns:\n    - list[str] - The coefficients of the derivative of the polynomial in the same form.\n    \"\"\"\n    # Convert string coefficients to integers.\n    int_xs = [int(x) for x in xs]\n    \n    # Calculate the derivative coefficients.\n    derivative_int_xs = [i * int_xs[i] for i in range(1, len(int_xs))]\n    \n    # Convert the derivative coefficients back to strings.\n    derivative_xs = [str(x) for x in derivative_int_xs]\n    \n    return derivative_xs",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: ['1', '4', '12', '20']\ntest_case2: ['1', '4', '12', '20']\ntest_case3: ['0', '0']\ntest_case4: ['-2', '-6']\ntest_case5: ['2']\ntest_case6: []\ntest_case7: []\ntest_case8: ['0', '2']\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Info Recombination",
        "category": "Info Recombination",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\"\n    Given a list of integers, xs, where xs represents coefficients of a polynomial. \n    The polynomial can be represented as xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Then returns the sum of all of the odd power coefficients in the derivative.\n    >>> derivative([3, 1, 2, 4, 5])\n    7\n    >>> derivative([1, 2, 3])\n    3\"\"\"",
        "perturbed_answer": "def gold_solution(xs: list) -> int:\n    # Initialize the sum of odd power coefficients.\n    sum_odd_coefficients = 0\n    \n    # Iterate over the list of coefficients, excluding the first term as its derivative is 0.\n    for i in range(1, len(xs)):\n        # Calculate the coefficient of the derivative term.\n        derivative_coefficient = i * xs[i]\n        \n        # Check if the original power was even (which means the derivative's power is odd).\n        if i % 2 == 0:\n            # Add to the sum if the power of the derivative is odd.\n            sum_odd_coefficients += derivative_coefficient\n    \n    return sum_odd_coefficients",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[1, 2, 3]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case7: [[10, 20, 30, 40, 50]]\ntest_case8: [[-5, -10, -15, -20, -25]]",
        "test_output": "test_case1: 24\ntest_case2: 6\ntest_case3: 0\ntest_case4: -6\ntest_case5: 0\ntest_case6: 27.0\ntest_case7: 260\ntest_case8: -130\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Variable Range",
        "category": "Identify Range",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "If all the item inside the input list is smaller than 1, what are the constraints on the output from this function below?",
        "perturbed_question": "def derivative(xs: list):\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]",
        "perturbed_answer": "The first item < 1, and nth item < n.",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Variable Substitution",
        "category": "Variable Group",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list, x: int):\n\n    \"\"\" xs represent coefficients of a polynomial and x is a specific value.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return x order derivative of this polynomial in the same form. The derivative of a constant is 0.\n    \"\"\"",
        "perturbed_answer": "def gold_solution(xs: list, x: int):\n    derivative_coeffs = xs[:]\n    \n    for _ in range(x):\n        derivative_coeffs = [i * derivative_coeffs[i] for i in range(1, len(derivative_coeffs))]\n    \n    return derivative_coeffs",
        "test_input": "test_case1: [[3, 1, 2, 4, 5], 2]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5], 3]\ntest_case3: [[0, 0, 0], 1]\ntest_case4: [[-1, -2, -3], 2]\ntest_case5: [[1, 2], 1]\ntest_case6: [[3, 1, 2, 4, 5], 0]\ntest_case7: [[3, 1, 2, 4, 5], -1]\ntest_case8: [[], 1]",
        "test_output": "test_case1: [4, 24, 60]\ntest_case2: [27.0, 132.0]\ntest_case3: [0, 0]\ntest_case4: [-6]\ntest_case5: [2]\ntest_case6: [3, 1, 2, 4, 5]\ntest_case7: [3, 1, 2, 4, 5]\ntest_case8: []\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "WhatIf Code",
        "category": "What If",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the `changed_function`, if the input is the same. ",
        "perturbed_question": "We know that if we input masked_input to the `original_function`, the output is the following:\n\n\"\"\"\n>>> original_function(masked_input)\n[1, 4, 12, 20]\n\"\"\"\n\nHere is the `original_function`:\ndef original_function(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\nHere is the `changed_function`:\n\ndef changed_function(xs: list):\n    return [(i * i * x) for i, x in enumerate(xs)][1:]\n\nWhat will be the output for `changed_function(masked_input)`",
        "perturbed_answer": "Reasoning Step:\n\nIn the original function, it returns the derivative of a polynomial where `xs` are the coefficients of a polynomial in the form of `xs[0] + xs[1] * x + xs[2] * x^2 + ....`. The output is calculated by multiplying each element in the list by its index value starting from the second element (index 1).\n\nThe `changed_function`, on the other hand, is using the squares of the indices to calculate the output. It's still starting from the second element just like the `original_function`, but this time it's multiplying each element in the list by the square of its index value.\n\nGiven that the result of the `original_function(masked_input)` is `[1, 4, 12, 20]`, it suggests that:\n- for `i = 1`, `x = 1` (1*1=1)\n- for `i = 2`, `x = 2` (2*2=4)\n- for `i = 3`, `x = 4` (3*4=12)\n- for `i = 4`, `x = 5` (4*5=20)\n\nNow, if we apply these values to the `changed_function`, we get:\n- for `i = 1`, `x = 1`, `1*1*1 = 1`\n- for `i = 2`, `x = 2`, `2*2*2 = 8`\n- for `i = 3`, `x = 4`, `3*3*4 = 36`\n- for `i = 4`, `x = 5`, `4*4*5 = 80`\n\nAnswer:\n\nTherefore, the output for `changed_function(masked_input)` will be `[1, 8, 36, 80]`.",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Generalize Parameter",
        "category": "Computation Demand",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative_generalized(xs: Union[list[int], list[float], str]):\n\n    \"\"\"\n    xs could represent coefficients of a polynomial in various forms. Depending on its type:\n    - If xs is a list, its elements will be treated as coefficients. i.e. xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    - If xs is a string, it needs to represent a polynomial expression such as \"3x^2 + 2x + 1\".\n    \n    The function should return the derivative of the input polynomial in the same form when it is received.\n    \"\"\"",
        "perturbed_answer": "def gold_solution(xs: Union[List[Union[int, float]], str]) -> Union[List[Union[int, float]], str]:\n    if isinstance(xs, list):  # If input is a list\n        return [i * xs[i] for i in range(1, len(xs))]\n    elif isinstance(xs, str):  # If input is a string\n        # Split the polynomial into terms\n        terms = xs.replace(' ', '').replace('-', '+-').split('+')\n        derivative_terms = []\n        \n        for term in terms:\n            if 'x' in term:\n                if '^' in term:\n                    # For terms like '3x^2'\n                    parts = term.split('x^')\n                    coefficient = 1 if parts[0] == '' else int(parts[0])\n                    exponent = int(parts[1])\n                    if exponent == 2:\n                        derivative_terms.append(f'{coefficient * exponent}x')\n                    else:\n                        derivative_terms.append(f'{coefficient * exponent}x^{exponent - 1}')\n                else:\n                    # For terms like '2x'\n                    coefficient = term[:-1]\n                    coefficient = 1 if coefficient == '' else int(coefficient)\n                    derivative_terms.append(str(coefficient))\n            # Constants disappear in the derivative, so they are ignored\n\n        return ' + '.join(derivative_terms)",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [\"3x^2 + 2x + 1\"]\ntest_case7: [\"5x^3 + 4x^2 + 3x + 2\"]\ntest_case8: [\"x^4 - 2x^3 + 3x^2 - 4x + 5\"]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: '6x + 2'\ntest_case7: '15x^2 + 8x + 3'\ntest_case8: '4x^3 + -6x^2 + 6x + -4'\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Higher Order",
        "category": "General Solution",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(poly_str: str) -> str:\n    \"\"\"\n    Accepts a polynomial as a string (e.g., '2x^2 + 3x + 4') and calculates its derivative.\n    The input string format is 'ax^n + bx + c', with terms possibly in descending order of power.\n    \n    Returns the derivative as a string in descending order of power.\n\n    Example:\n    Input: '2x^2 + 3x + 4'\n    Output: '4x + 3'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(poly_str: str) -> str:\n    # Split the polynomial into its terms, considering both '+' and '-' signs.\n    terms = poly_str.replace(' ', '').replace('-', '+-').split('+')\n\n    # Function to parse each term into its coefficient and power of x.\n    def parse_term(term):\n        if 'x' in term:\n            if '^' in term:\n                coefficient, power = term.split('x^')\n                power = int(power)\n            else:\n                coefficient = term.split('x')[0]\n                power = 1\n            coefficient = int(coefficient) if coefficient not in ['', '-'] else 1 if coefficient == '' else -1\n        else:\n            coefficient = int(term)\n            power = 0\n        return coefficient, power\n\n    # Calculate the derivative for each term and store the results.\n    derivative_terms = []\n    for term in terms:\n        if term:  # Ignore empty strings that may result from the split operation.\n            coefficient, power = parse_term(term)\n            if power > 0:\n                # Apply the derivative rule: d/dx[ax^n] = (a*n)x^(n-1)\n                new_coefficient = coefficient * power\n                new_power = power - 1\n                derivative_terms.append((new_power, new_coefficient))\n\n    # Sort the terms by power in descending order\n    derivative_terms.sort(reverse=True, key=lambda x: x[0])\n\n    # Format the sorted terms into a string\n    derivative_str_terms = []\n    for power, coefficient in derivative_terms:\n        if power == 0:\n            derivative_str_terms.append(f\"{coefficient}\")\n        elif power == 1:\n            derivative_str_terms.append(f\"{coefficient}x\")\n        else:\n            derivative_str_terms.append(f\"{coefficient}x^{power}\")\n\n    # Join the calculated derivative terms into a single string.\n    derivative_str = ' + '.join(derivative_str_terms)\n\n    # Handle the special case when the derivative is a constant or zero.\n    if not derivative_terms:\n        derivative_str = '0'\n\n    return derivative_str",
        "test_input": "test_case1: ['2x^2 + 3x + 4']\ntest_case2: ['3x^3 + 2x^2 + x + 5']\ntest_case3: ['x^4 + 2x^3 + 3x^2 + 4x + 5']\ntest_case4: ['5x^5 + 4x^4 + 3x^3 + 2x^2 + x + 6']\ntest_case5: ['x^2 + 2x + 3']\ntest_case6: ['2x^3 + 3x^2 + 4x + 5']\ntest_case7: ['3x^4 + 2x^3 + x^2 + 4x + 5']\ntest_case8: ['4x^5 + 3x^4 + 2x^3 + x^2 + 5']",
        "test_output": "test_case1: '4x + 3'\ntest_case2: '9x^2 + 4x + 1'\ntest_case3: '4x^3 + 6x^2 + 6x + 4'\ntest_case4: '25x^4 + 16x^3 + 9x^2 + 4x + 1'\ntest_case5: '2x + 2'\ntest_case6: '6x^2 + 6x + 4'\ntest_case7: '12x^3 + 6x^2 + 2x + 4'\ntest_case8: '20x^4 + 12x^3 + 6x^2 + 2x'\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Solution Plan",
        "category": "Solution Plan",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list) -> list:\n    \"\"\"\n    Calculates the derivative of a polynomial represented by its coefficients.\n    The input list xs represents the coefficients of the polynomial in the form:\n    xs[0] + xs[1]*x + xs[2]*x^2 + ... + xs[n]*x^n.\n    \n    Parameters:\n    xs (list): The coefficients of the polynomial.\n    \n    Returns:\n    list: The coefficients of the derivative of the polynomial.\n    \n    Example:\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    \n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Solution Plan:\n    # 1. The function will iteratively find the derivative for each term in the polynomial represented by xs[].\n    # 2. It will multiply the coefficient of each term by the power position of the term to find the derivative.\n    # 3. The new coefficient will be found and this will form the new list that will be returned as the polynomial derivative.\n    \n    # Implementing the solution plan\n    ",
        "perturbed_answer": "def gold_solution(xs: list) -> list:\n    derivative_coeffs = [i * xs[i] for i in range(1, len(xs))]\n    \n    return derivative_coeffs",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: []\ntest_case7: []\ntest_case8: [0, 2]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Code Execution",
        "category": "Symbolic Response",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the following function, if the input is:xs = [4, 3, 2, 1]",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "perturbed_answer": "[3, 4, 3]",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Realworld Usecase",
        "category": "Setting Rephrase",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def calculate_accelerate(speed_values: list):\n\n    \"\"\" \n    Imagine you are a physicist studying patterns in speed changes of a vehicle. \n    The 'speed_values' parameter here represents different speeds of a vehicle on a journey at various time points\n    represented by a polynomial equation such as speed_values[0] + speed_values[1] * t + speed_values[2] * t^2 + ....\n    The function returns the accelerate values with respect to time in the same format.\n    \n    Examples:\n    >>> calculate_accelerate([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> calculate_accelerate([1, 2, 3])\n    [2, 6]\n\n    The output represents acceleration values at given time sequences.\n    \"\"\"",
        "perturbed_answer": "\ndef gold_solution(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: []\ntest_case7: []\ntest_case8: []\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Reduce Complexity",
        "category": "Optimize Solution",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Optimize the code below to more efficiently achive the same requirement specified in the docstring",
        "perturbed_question": "def derivative_polynomial(coefficients, derivative=None, index=0):\n    \"\"\"\n    This function calculates the derivative of a polynomial using recursion.\n    coefficients: List of coefficients of the polynomial.\n    derivative: List to store the coefficients of the derivative. Initially None.\n    index: Current index in the coefficients list.\n    \n    The base case of the recursion is when the index is equal to the length of the coefficients list.\n    \"\"\"\n    # Initialize the derivative list on the first call\n    if derivative is None:\n        derivative = []\n\n    # Base case: when index reaches the length of coefficients, stop the recursion\n    if index >= len(coefficients):\n        return derivative\n\n    # Skip the first coefficient since its derivative is 0 (constant term)\n    if index > 0:\n        # Compute the derivative for the current index and add it to the derivative list\n        derivative_coefficient = index * coefficients[index]\n        derivative.append(derivative_coefficient)\n\n    # Recursive call to process the next coefficient\n    return derivative_polynomial(coefficients, derivative, index + 1)\n",
        "perturbed_answer": "\n\n\ndef derivative_polynomial(coefficients: list):\n    \"\"\" coefficients represent coefficients of a polynomial.\n    coefficients[0] + coefficients[1] * x + coefficients[2] * x^2 + ....\n    This function will return the derivative of the polynomial in the same format.\n    \"\"\"\n\n    return [(index * coefficient) for index, coefficient in enumerate(coefficients)][1:]\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Code Complexity",
        "category": "Cost Analysis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Analyze the time and space complexity regarding to input parameter string of the following function.",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "perturbed_answer": "Time complexity: O(n), space complexity: O(n)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Identical Code",
        "category": "Identical Solution",
        "dimension": "Pairwise Comparison",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Is function_1 and function_2 identical in terms of its functionality?",
        "perturbed_question": "Code 1:\ndef function(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\nCode 2:\ndef function(xs: list):\n    derivative = [i * xs[i] for i in range(1, len(xs))]\n",
        "perturbed_answer": "TRUE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Parameter Relationship",
        "category": "Value Relationship",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Categorize the all the possible input parameters of the following function into groups, if the output is [0, 3, 6]",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "perturbed_answer": "There is only one input group: [c, 0, 1.5, 2], where c can be any number",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Introduce Bias",
        "category": "Add Misinformation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2])\n    [1, 4]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "perturbed_answer": "\ndef gold_solution(xs: list):\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: []\ntest_case7: []\ntest_case8: [0, 2]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Test Case",
        "category": "Inherent Premise",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Provide input parameters for the test cases of the specified coding problem. These parameters should encompass boundary conditions within the scope defined by the function's requirements specification, and avoid scenarios that fall outside of these requirements.",
        "perturbed_question": "\n\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n",
        "perturbed_answer": "\n\nInput: [5]\nInput: [2, 3]\nInput: [0, 3, -2, 1]",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Solve Input",
        "category": "Solve Value",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find what are possible potential input to the following function, if the output is: [0, 2, 6, 12]",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "perturbed_answer": "[c, 0, 1, 2, 3]",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Code Import",
        "category": "Domain Knowledge",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Rewrite the function below to take in batch input parameter and use the multicore cpu.",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "perturbed_answer": "def derivative_operation(input_data):\n    i, x = input_data\n    return i * x\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    # Create a pool of processes\n    with mp.Pool() as pool:\n        # Apply derivative_operation to each item in the list xs using the pool of processes\n        result = pool.map(derivative_operation, enumerate(xs))\n\n    return result[1:]",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "No Keyword",
        "category": "Reasoning Format",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form. Answer the coding function below without using the python keyword \"for\" in the solution\n\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "perturbed_answer": "def gold_solution(xs: list):\n    return list(map(lambda i: xs[i] * i, range(1, len(xs))))\n",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: []\ntest_case7: []\ntest_case8: [0, 2]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "X Language",
        "category": "Reasoning Style",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below in c++",
        "perturbed_question": "\nstd::vector<int> derivative(std::vector<int> xs);\n  \n/*\n * xs represent coefficients of a polynomial.\n * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n * Return derivative of this polynomial in the same form.\n */\n\n/*\n * >>> derivative({3, 1, 2, 4, 5})\n * {1, 4, 12, 20}\n * >>> derivative({1, 2, 3})\n * {2, 6}\n */",
        "perturbed_answer": "```cpp\n#include <vector>\n\nstd::vector<int> derivative(std::vector<int> xs) {\n    std::vector<int> res;  // Vector to hold the resulting coefficients of the derivative\n\n    for(int i = 1; i < xs.size(); i++) {  // Start from 1 since the derivative of the first coefficient (constant term) is always 0\n        // The coefficient in the derivative for x^i is i * the coefficient of x^i in the original polynomial\n        res.push_back(i * xs[i]);\n    }\n\n    return res;\n}\n```",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Simple Name",
        "category": "New Rule",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below and only use 2 letter word for each variable names inside the solution",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "perturbed_answer": "As long as the solution solve the problem and only have 2 letter in each variable name",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Step Necessity",
        "category": "Step Functionality",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Explain what is the the line below the comment functionality?",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n    derivative_coeffs = []\n    for i in range(1, len(xs)):\n        # Explain what is the functionality of the line below?\n        derivative_coeffs.append(xs[i] * i)\n    return derivative_coeffs",
        "perturbed_answer": " Multiply the coefficient by its degree (index) to get the derivative\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Alternative Answer",
        "category": "Alternative Answer",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Find an alternative way to complete for the following coding question correctly, your solution should be different from #Completion#.",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n#Completion#:\nreturn [(i * x) for i, x in enumerate(xs)][1:]",
        "perturbed_answer": "As long as the answer is different and fulfill the requirement, it is correct",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Question Formulation",
        "category": "Question Formulation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Write a concise code description for the following code of its functionality. Hint: it is related to calculating derivative.",
        "perturbed_question": "\ndef function(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "perturbed_answer": "Description: def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Reverse Engineering",
        "category": "Backward Reasoning",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Create a function that reverses the following function's process, effectively transforming its output back into the original input, and suppose the first item in xs is always 0\n",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "perturbed_answer": "def function(xs: list):\n    return [0] + list(map(lambda ix: xs[ix-1] / ix, range(1, len(xs)+1)))",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Parameter Sequence",
        "category": "Change Sequence",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def fruitBatTango(animalCircus: list):\n\n    \"\"\" The variable 'animalCircus' holds a representation of the coefficients of a polynomial.\n    animalCircus[0] + animalCircus[1] * x + animalCircus[2] * x^2 + ....\n    It returns the derivative of this polynomial in the same form.\n\n    >>> fruitBatTango([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> fruitBatTango([1, 2, 3])\n    [2, 6]\n    \"\"\"",
        "perturbed_answer": "def gold_solution(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: []\ntest_case7: []\ntest_case8: [0, 2]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Incomplete Answer",
        "category": "Complete Missing",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below by predicting what is inside the masked code paragraph",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []  # Initialize empty list for result\n    [masked code paragraph]\n        coefficient = xs[index]  # Get the coefficient at current index\n        derived = coefficient * index  # Calculate the derivative for this term\n        result.append(derived)  # Append the derivative to the result list\n        index += 1  # Move to the next term\n    return result",
        "perturbed_answer": "def derivative_multiline(xs: list):\n    result = []  # Initialize empty list for result\n    index = 1  # Start index from 1 since the derivative of constant term is 0\n    while index < len(xs):\n        coefficient = xs[index]  # Get the coefficient at current index\n        derived = coefficient * index  # Calculate the derivative for this term\n        result.append(derived)  # Append the derivative to the result list\n        index += 1  # Move to the next term\n    return result",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "True False",
        "category": "Close Format",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Evaluate whether the solution below is the correct solution for the coding question, True or False?",
        "perturbed_question": "Function:\n\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\nSolution:\n\n    return [(i * xs[i-1]) for i in range(1, len(xs))]\n",
        "perturbed_answer": "FALSE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Incomplete Requirement",
        "category": "Conditional Analysis",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial.\n\n    \"\"\"",
        "perturbed_answer": "The docstring did not specify the output form",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Wrong Example",
        "category": "Conflicting Information",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n\n    >>> derivative([3, 1, 2, 4, 5])\n    [3, 2, 8, 20] \n    >>> derivative([1, 2, 3])\n    [1, 4]\n    \"\"\"",
        "perturbed_answer": "The given example is wrong",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Runtime Error",
        "category": "Surface Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    return ((i * x) for i, x in enumerate(xs))[1:]",
        "perturbed_answer": "The generator cannot be indexed, must add list() to the front",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Logical Error",
        "category": "Hidden Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [(i * x) for i, x in enumerate(xs, start=1)]",
        "perturbed_answer": "It should ignore the first element",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Complex Docstring",
        "category": "Data Restructuring",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" The elements designated by 'xs' symbolize the coefficients of a polynomial    \n    function, with the structure articulated as xs[0] + xs[1] * x + xs[2] * x^2 + ..., extending ad infinitum according to the polynomial's degree. The task    \n    necessitates the computation of the derivative of this polynomial, adhering to\n    the principles of differential calculus, and subsequently returning the       \n    derivative's coefficients in a congruent structural format. This entails      \n    applying the differentiation operation to each term of the polynomial, thereby\n    multiplying each coefficient by its corresponding power of 'x', decrementing  \n    the power by one to reflect the derivative's power rule, and compiling these  \n    differentiated coefficients in an array or list that mirrors the original     \n    coefficient array's format, albeit adjusted to represent the polynomial's     \n    derivative.     \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\"\"\"",
        "perturbed_answer": "\ndef gold_solution(xs: list):\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[0]]\ntest_case8: [[-1, 0, 1]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: []\ntest_case7: []\ntest_case8: [0, 2]\n"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Theoretical Basis",
        "category": "Theoretical Basis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Please describe to me in simple terms, assuming I have no knowledge of programming. Your task isn't to solve the coding problem itself, but rather to identify the programming concepts in Python that would be necessary to address the problem presented below.",
        "perturbed_question": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "perturbed_answer": "Depend on the answer",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Example Requirement",
        "category": "Seek Clarification",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Begin by analyzing the function's behavior specified in the docstring to understand its pattern, and then proceed to code the function accordingly.",
        "perturbed_question": "def function(xs: list) -> list[int]:\n\n    \"\"\"function([5]) == []\nfunction([2, 3]) == [3]\nfunction([1, -4, 3]) == [-4, 6]\nfunction([3, 0, 2, -1]) == [0, 4, -3]\nfunction([2, -1, 0, 3, 1]) == [-1, 0, 9, 4]\nfunction([1, 1, 1, 1, 1]) == [1, 2, 3, 4]\n    \"\"\"",
        "perturbed_answer": "def function(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n\n    \"\"\"\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "math_category": "Example Boundary",
        "category": "Complex Reality",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def derivative(xs: list):\n\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form. The solution should pass all the test cases specified below\n\n    # Regular case\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    # Smaller case\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    # Special case with empty list\n    >>> derivative([])\n    []\n    # Boundary case, the shortest polynomial\n    >>> derivative([1])\n    [0]\n    # Boundary case, all-zero polynomial\n    >>> derivative([0.0, 0.0, 0.0])\n    [0, 0]\n    \"\"\"",
        "perturbed_answer": "def gold_solution(xs: list):\n    \"\"\"\n    Calculate the derivative of a polynomial represented by its coefficients.\n    The coefficients are in increasing order of powers. Adjusted to ensure correct type for all-zero polynomials.\n    \"\"\"\n    # Handle the special case of an empty list\n    if not xs:\n        return []\n\n    # Calculate the derivative with correct type adjustment for all-zero polynomials\n    derivative_coeffs = [i * xs[i] for i in range(1, len(xs))]\n    \n    # Convert all float zeros to integer zeros if applicable\n    derivative_coeffs = [int(x) if x == 0 else x for x in derivative_coeffs]\n    \n    # Handle the boundary case for the shortest polynomial\n    if len(derivative_coeffs) == 0:\n        return [0]\n    \n    return derivative_coeffs\n",
        "test_input": "test_case1: [[3, 1, 2, 4, 5]]\ntest_case2: [[3.5, 1.5, 2.5, 4.5, 5.5]]\ntest_case3: [[0, 0, 0]]\ntest_case4: [[-1, -2, -3]]\ntest_case5: [[1, 2]]\ntest_case6: [[1]]\ntest_case7: [[]]\ntest_case8: [[0.0, 0.0, 0.0]]",
        "test_output": "test_case1: [1, 4, 12, 20]\ntest_case2: [1.5, 5.0, 13.5, 22.0]\ntest_case3: [0, 0]\ntest_case4: [-2, -6]\ntest_case5: [2]\ntest_case6: [0]\ntest_case7: []\ntest_case8: [0, 0]\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Restrict Requirement",
        "category": "Add Restriction",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor(a: int, b: int, c: int) -> int:\n\n    \"\"\" Return a greatest prime common divisor of three integers a, b.\n\n    >>> greatest_common_divisor(3, 5, 7)\n    1\n    >>> greatest_common_divisor(25, 50, 10)\n    5\n    \"\"\"",
        "perturbed_answer": "def gold_solution(a: int, b: int, c: int) -> int:\n    \"\"\"Return the greatest common divisor of three integers a, b, c.\"\"\"\n    # Helper function to find gcd of two numbers\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    # Find gcd of a and b, then find gcd of result with c\n    return gcd(gcd(a, b), c)",
        "test_input": "test_case1: [20, 30, 40]\ntest_case2: [15, 5, 10]\ntest_case3: [11, 3, 33]\ntest_case4: [24, 36, 48]\ntest_case5: [101, 103, 107]\ntest_case6: [1, 1, 1]\ntest_case7: [-3, 9, 18]\ntest_case8: [-3, -9, -18]",
        "test_output": "test_case1: 10\ntest_case2: 5\ntest_case3: 1\ntest_case4: 12\ntest_case5: 1\ntest_case6: 1\ntest_case7: 3\ntest_case8: -3\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Further Requirement",
        "category": "Subsequent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor_and_least_common_multiple(a: int, b: int) -> Tuple[int, int]:\n\n    \"\"\" Return a greatest common divisor and least common multiple of two integers a and b\n\n    >>> greatest_common_divisor_and_least_common_multiple(3, 5)\n    (1, 15)\n    >>> greatest_common_divisor_and_least_common_multiple(25, 15)\n    (5, 75)\n    \"\"\"",
        "perturbed_answer": "def gold_solution(a: int, b: int) -> Tuple[int, int]:\n    \"\"\"Return the greatest common divisor and least common multiple of two integers a and b.\"\"\"\n    \n    # Helper function to compute the GCD using Euclidean algorithm\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n    \n    # Calculate GCD\n    gcd_value = gcd(a, b)\n    \n    # Calculate LCM using the relationship between GCD and LCM\n    lcm_value = abs(a * b) // gcd_value\n    \n    return gcd_value, lcm_value",
        "test_input": "test_case1: [10, 20]\ntest_case2: [100, 200]\ntest_case3: [13, 26]\ntest_case5: [1, 100]\ntest_case6: [-10, 20]\ntest_case7: [-10, -20]",
        "test_output": "test_case1: (10, 20)\ntest_case2: (100, 200)\ntest_case3: (13, 26)\ntest_case5: (1, 100)\ntest_case6: (10, 20)\ntest_case7: (-10, -20)\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Parallel Requirement",
        "category": "Concurrent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def function(a: int, b: int) -> Tuple[int, int]:\n\n    \"\"\" Return a greatest common divisor of two integers a and b, and find all the unique prime factors of integer a.\n    \"\"\"",
        "perturbed_answer": "def gold_solution(a: int, b: int) -> Tuple[int, List[int]]:\n    # Function to find GCD of two numbers\n    def gcd(x: int, y: int) -> int:\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    # Function to find all prime factors of a number\n    def prime_factors(n: int) -> List[int]:\n        factors = []\n        # Divide by two until odd\n        while n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        # Divide by possible odd factors\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        # If n is a prime number greater than 2\n        if n > 2:\n            factors.append(n)\n        return factors\n\n    return gcd(a, b), list(set(prime_factors(a)))",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Remove Constraint",
        "category": "Remove Constraint",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return one possible common divisor of two integers a and b.\n    >>> common_divisor(3, 5)\n    1\n    >>> common_divisor(25, 15)\n    5\n    \"\"\"",
        "perturbed_answer": "Give just one solution that can find one correct common divisors is okay",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Helper Function",
        "category": "Partial Solution",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below using helper function",
        "perturbed_question": "\n\ndef helper_function(n): \n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b, you should use the helper_function to achieve the goal\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    ",
        "perturbed_answer": "def gold_solution(a: int, b: int) -> int:\n    # Find divisors for both numbers\n    divisors_a = helper_function(a)\n    divisors_b = helper_function(b)\n    \n    # Find common divisors by intersecting the two sets\n    common_divisors = list(set(divisors_a) & set(divisors_b))\n    \n    # Return the greatest common divisor\n    return max(common_divisors)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Change Docstring",
        "category": "Change Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def are_coprime(a: int, b: int) -> bool:\n    \"\"\"\n    Determines if `a` and `b` are coprime (gcd(a, b) = 1).\n    Returns `True` if they are, `False` otherwise.\n\n    Examples:\n    print(are_coprime(15, 28))  # True\n    print(are_coprime(21, 14))  # False\n    print(are_coprime(8, 9))    # True\n    \"\"\"",
        "perturbed_answer": "\n\ndef gold_solution(a: int, b: int) -> bool:\n    from math import gcd\n    return gcd(a, b) == 1",
        "test_input": "test_case1: [15, 28]\ntest_case2: [21, 14]\ntest_case3: [8, 9]\ntest_case4: [1, 100]\ntest_case5: [0, 1]\ntest_case6: [-5, -15]\ntest_case7: [-7, 14]\ntest_case8: [0, 0]",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: True\ntest_case4: True\ntest_case5: True\ntest_case6: False\ntest_case7: False\ntest_case8: False\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Example Detail",
        "category": "Detail Expansion",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(3, 5): no integers greater than 1 divide both numbers without leaving a remainder, making the GCD 1.\n    1For the inputs (3, 5)\n\n    >>> greatest_common_divisor(25, 15): For the inputs (25, 15), the highest number that divides both 25 and 15 evenly is 5, so the GCD is 5.\n    5\n    \"\"\"\n\n",
        "perturbed_answer": "\ndef gold_solution(a: int, b: int) -> int:\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test_input": "test_case1: [20, 30]\ntest_case2: [15, 5]\ntest_case3: [11, 3]\ntest_case4: [24, 36]\ntest_case5: [101, 103]\ntest_case6: [1, 1]\ntest_case7: [3, 9]\ntest_case8: [3, -9]",
        "test_output": "test_case1: 10\ntest_case2: 5\ntest_case3: 1\ntest_case4: 12\ntest_case5: 1\ntest_case6: 1\ntest_case7: 3\ntest_case8: -3\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Parameter Content",
        "category": "Change Value",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor(decimal1: float, decimal2: float) -> float:\n    \"\"\"\n    Identifies the largest float that, when both input decimals are divided by it, results in integers.\n    This function finds a common divisor in floating-point representation that meets the specified criteria.\n    \n    Examples:\n    print(find_largest_common_float(0.5, 1.0))  # 0.5\n    print(find_largest_common_float(0.3, 0.6))  # 0.3\n    \"\"\"",
        "perturbed_answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef gold_solution(decimal1: float, decimal2: float) -> float:\n    # Convert decimals to integers based on their precision\n    precision1 = 10 ** len(str(decimal1).split('.')[1]) if '.' in str(decimal1) else 1\n    precision2 = 10 ** len(str(decimal2).split('.')[1]) if '.' in str(decimal2) else 1\n    max_precision = max(precision1, precision2)\n    \n    int1 = int(decimal1 * max_precision)\n    int2 = int(decimal2 * max_precision)\n    \n    # Find the GCD of the converted integers\n    gcd_int = gcd(int1, int2)\n    \n    # Convert the GCD back to the decimal form\n    largest_common_float = gcd_int / max_precision\n    return largest_common_float",
        "test_input": "test_case1: [0.5, 1.0]\ntest_case2: [0.3, 0.6]\ntest_case3: [1.5, 3.0]\ntest_case4: [2.4, 3.6]\ntest_case5: [10.1, 10.3]\ntest_case6: [1.0, 1.0]\ntest_case7: [-0.3, 0.9]\ntest_case8: [-0.3, -0.9]",
        "test_output": "test_case1: 0.5\ntest_case2: 0.3\ntest_case3: 1.5\ntest_case4: 1.2\ntest_case5: 0.1\ntest_case6: 1.0\ntest_case7: 0.3\ntest_case8: -0.3\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Variable Type",
        "category": "Change Operation",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor(a: str, b: str) -> str:\n\n    \"\"\" Return a greatest common divisor of two integers a and b, where a and b are strings that can be converted to integers\n\n    >>> greatest_common_divisor('3', '5')\n    '1'\n    >>> greatest_common_divisor('25', '15')\n    '5'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(a: str, b: str) -> str:\n    # Convert the string inputs to integers\n    a = int(a)\n    b = int(b)\n    \n    # Implement the Euclidean algorithm to find the GCD\n    while b != 0:\n        a, b = b, a % b\n    \n    # Return the GCD as a string\n    return str(a)",
        "test_input": "test_case1: ['20', '30']\ntest_case2: ['15', '5']\ntest_case3: ['11', '3']\ntest_case4: ['24', '36']\ntest_case5: ['101', '103']\ntest_case6: ['1', '1']\ntest_case7: ['-3', '9']\ntest_case8: ['-3', '-9']",
        "test_output": "test_case1: '10'\ntest_case2: '5'\ntest_case3: '1'\ntest_case4: '12'\ntest_case5: '1'\ntest_case6: '1'\ntest_case7: '3'\ntest_case8: '-3'\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Info Recombination",
        "category": "Info Recombination",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def merged_gcd_and_odd_sum(a: int, b: int) -> tuple:\n\n    \"\"\" \n    This function returns a tuple containing two elements. The first element is the greatest common divisor of two integers 'a' and 'b', \n    the second element is the sum of all of the odd unique common divisors of a and b.\n\n    Examples:\n\n    >>> merged_gcd_and_odd_sum(12, 18)\n    (6, 4)\n    >>> merged_gcd_and_odd_sum(28, 35)\n    (7, 8)\n    \"\"\"\n",
        "perturbed_answer": "def gcd(a: int, b: int) -> int:\n    \"\"\"Compute the Greatest Common Divisor of a and b.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef common_divisors(a: int, b: int) -> set:\n    \"\"\"Find all common divisors of a and b.\"\"\"\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return divisors\n\ndef gold_solution(a: int, b: int) -> tuple:\n    gcd_value = gcd(a, b)\n    common_divs = common_divisors(a, b)\n    sum_of_odd_common_divisors = sum(filter(lambda x: x % 2 == 1, common_divs))\n    return (gcd_value, sum_of_odd_common_divisors)\n",
        "test_input": "test_case1: [20, 30]\ntest_case2: [15, 5]\ntest_case3: [11, 3]\ntest_case4: [24, 36]\ntest_case5: [101, 103]\ntest_case6: [1, 1]\ntest_case7: [-3, 9]\ntest_case8: [-3, -9]",
        "test_output": "test_case1: (10, 6)\ntest_case2: (5, 6)\ntest_case3: (1, 1)\ntest_case4: (12, 4)\ntest_case5: (1, 1)\ntest_case6: (1, 1)\ntest_case7: (3, 0)\ntest_case8: (-3, 0)\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Variable Range",
        "category": "Identify Range",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "What are possible range of the output values?",
        "perturbed_question": "\ndef function(a: int, b: int) -> int:\n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "perturbed_answer": "output >= 0",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Variable Substitution",
        "category": "Variable Group",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor(a: int, b: int, n: int) -> int:\n\n    \"\"\" Return the nth largest common divisor of two integers a and b that is unique. If n is bigger than the number of unique common divisor, return None\n\n    >>> greatest_common_divisor(3, 5, 1)\n    1\n    >>> greatest_common_divisor(25, 15, 5)\n    None\n    \"\"\"",
        "perturbed_answer": "def gold_solution(a: int, b: int, n: int) -> int:\n    # Helper function to find gcd of two numbers\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    # Find the gcd of a and b\n    gcd_value = gcd(a, b)\n    \n    # List to store unique divisors\n    divisors = []\n    \n    # Find divisors of gcd_value\n    for i in range(1, gcd_value + 1):\n        if gcd_value % i == 0:\n            divisors.append(i)\n    \n    # Check if n is within the range of unique divisors from the end\n    if n <= len(divisors):\n        return divisors[-n] # Return the nth largest unique divisor\n    else:\n        return None",
        "test_input": "test_case1: [20, 30, 1]\ntest_case2: [15, 5, 2]\ntest_case3: [11, 3, 1]\ntest_case4: [24, 36, 3]\ntest_case5: [101, 103, 1]\ntest_case6: [1, 1, 1]\ntest_case7: [-3, 9, 1]",
        "test_output": "test_case1: 10\ntest_case2: 1\ntest_case3: 1\ntest_case4: 4\ntest_case5: 1\ntest_case6: 1\ntest_case7: 3\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "WhatIf Code",
        "category": "What If",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the `function`, if one input doubles? ",
        "perturbed_question": "We know that if we input masked_input to the `function`, the output is the following:\n\"\"\"\n>>> function(masked_input_a, masked_input_b)\n3\n\"\"\"\nHere is the `function`:\n\ndef function(a: int, b: int) -> int:\n\n    while b:\n        a, b = b, a % b\n    return a\nWhat will be the output for `original_function(2*masked_input_a, masked_input_b)`?\n",
        "perturbed_answer": "The answer maybe 6 or 3",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Generalize Parameter",
        "category": "Computation Demand",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def find_common_divisor(value1: Union[int, float, str], value2: Union[int, float, str]) -> float:\n    \"\"\"\n    Takes two values (int, float, or float in string format) and finds the largest float that divides both into integers.\n    Inputs can be a mix of types. Returns the divisor as a float.\n\n    Examples:\n    print(find_common_divisor(\"0.5\", 1))  # 0.5\n    print(find_common_divisor(0.25, \"1.25\"))  # 0.25\n    \"\"\"\n",
        "perturbed_answer": "def gold_solution(value1: Union[int, float, str], value2: Union[int, float, str]) -> float:\n    def gcd(a: int, b: int) -> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n    # Convert input values to float\n    val1 = float(value1)\n    val2 = float(value2)\n    \n    # Convert decimals to integers based on their precision\n    precision1 = 10 ** len(str(val1).split('.')[1]) if '.' in str(val1) else 1\n    precision2 = 10 ** len(str(val2).split('.')[1]) if '.' in str(val2) else 1\n    max_precision = max(precision1, precision2)\n    \n    int1 = int(val1 * max_precision)\n    int2 = int(val2 * max_precision)\n    \n    # Find the GCD of the converted integers\n    gcd_int = gcd(int1, int2)\n    \n    # Convert the GCD back to the decimal form\n    largest_common_float = gcd_int / max_precision\n    return largest_common_float",
        "test_input": "test_case1: [20, 30]\ntest_case2: [\"15\", 5]\ntest_case3: [11, \"3\"]\ntest_case4: [24.0, 36]\ntest_case5: [\"101.0\", 103]\ntest_case6: [1, \"1.0\"]\ntest_case7: [-3, \"9.0\"]\ntest_case8: [-3.0, \"-9\"]",
        "test_output": "test_case1: 10.0\ntest_case2: 5.0\ntest_case3: 1.0\ntest_case4: 12.0\ntest_case5: 1.0\ntest_case6: 1.0\ntest_case7: 3.0\ntest_case8: -3.0\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Higher Order",
        "category": "General Solution",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor(numbers: list[int]) -> int:\n    \"\"\"\n    Calculates the greatest common divisor (GCD) of a list of integers.\n    Returns the GCD as an integer.\n    \n    Examples:\n    - For numbers = [20, 40, 60], the function returns 20.\n    - For numbers = [35, 14], the function returns 7.\n    \"\"\"",
        "perturbed_answer": "def gold_solution(numbers):\n\n    def find_gcd(a, b):\n        \"\"\"Helper function to find GCD of two numbers using Euclidean algorithm.\"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Applying the GCD function iteratively over the list of numbers\n    gcd_result = numbers[0]\n    for number in numbers[1:]:\n        gcd_result = find_gcd(gcd_result, number)\n\n    return gcd_result",
        "test_input": "test_case1: [[20, 40, 60]]\ntest_case2: [[35, 14]]\ntest_case3: [[100, 200, 300, 400]]\ntest_case4: [[13, 26, 39]]\ntest_case5: [[1, 2, 3, 4, 5]]\ntest_case6: [[0, 0]]\ntest_case7: [[-20, -40, -60]]\ntest_case8: [[-35, -14]]",
        "test_output": "test_case1: 20\ntest_case2: 7\ntest_case3: 100\ntest_case4: 13\ntest_case5: 1\ntest_case6: 0\ntest_case7: -20\ntest_case8: -7\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Solution Plan",
        "category": "Solution Plan",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n    Returns the GCD as an integer.\n    \n    Examples:\n    - For a = 3 and b = 5, the function returns 1.\n    - For a = 25 and b = 15, the function returns 5.\n    \"\"\"\n    \n    # The Euclidean algorithm repeatedly applies the process of replacing\n    # the larger number by the remainder of the division of the larger number by the smaller number.\n    # This process continues until one of the numbers becomes 0.\n    # The other number at that point is the GCD of the original pair.\n   \n        # Calculate the remainder of a divided by b.\n\n    \n    # At this point, b is 0, and a contains the GCD of the original numbers.\n\n",
        "perturbed_answer": "def gold_solution(a: int, b: int) -> int:\n    \"\"\"\n    Calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n    Returns the GCD as an integer.\n    \n    Examples:\n    - For a = 3 and b = 5, the function returns 1.\n    - For a = 25 and b = 15, the function returns 5.\n    \"\"\"\n\n    # The Euclidean algorithm repeatedly applies the process of replacing\n    # the larger number by the remainder of the division of the larger number by the smaller number.\n    # This process continues until one of the numbers becomes 0.\n    # The other number at that point is the GCD of the original pair.\n    while b != 0:\n        # Calculate the remainder of a divided by b.\n        temp = b\n        b = a % b\n        a = temp\n    \n    # At this point, b is 0, and a contains the GCD of the original numbers.\n    return a\n",
        "test_input": "test_case1: [20, 30]\ntest_case2: [15, 5]\ntest_case3: [11, 3]\ntest_case4: [24, 36]\ntest_case5: [101, 103]\ntest_case6: [1, 1]\ntest_case7: [0, 9]\ntest_case8: [3, 0]",
        "test_output": "test_case1: 10\ntest_case2: 5\ntest_case3: 1\ntest_case4: 12\ntest_case5: 1\ntest_case6: 1\ntest_case7: 9\ntest_case8: 3\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Code Execution",
        "category": "Symbolic Response",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the following function, if the input is:a = 1024, b = 192",
        "perturbed_question": "\ndef function(a: int, b: int) -> int:\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "perturbed_answer": "64",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Realworld Usecase",
        "category": "Setting Rephrase",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def calculate_equal_resizings(original_width, original_height):\n    \"\"\"\n    Determine the maximum number of times an image can be uniformly resized \n    based on its original dimensions.\n\n    This function calculates how many times an image can be resized into smaller, \n    proportionally equal dimensions, maintaining the same aspect ratio as the original. \n    It's particularly useful in scenarios where consistent and proportional scaling \n    is needed, such as in certain graphic design or image processing tasks.\n\n    :param original_width: The original width of the image.\n    :param original_height: The original height of the image.\n    :return: An integer representing the maximum number of equal resizings.\n    \"\"\"",
        "perturbed_answer": "def gold_solution(a: int, b: int) -> int:\n\n    while b != 0:\n        # Calculate the remainder of a divided by b.\n        temp = b\n        b = a % b\n        a = temp\n    \n    # At this point, b is 0, and a contains the GCD of the original numbers.\n    return a",
        "test_input": "test_case1: [20, 30]\ntest_case2: [15, 5]\ntest_case3: [11, 3]\ntest_case4: [24, 36]\ntest_case5: [101, 103]\ntest_case6: [1, 1]\ntest_case7: [0, 9]\ntest_case8: [3, 0]",
        "test_output": "test_case1: 10\ntest_case2: 5\ntest_case3: 1\ntest_case4: 12\ntest_case5: 1\ntest_case6: 1\ntest_case7: 9\ntest_case8: 3\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Reduce Complexity",
        "category": "Optimize Solution",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Optimize the code below to more efficiently achive the same requirement specified in the docstring",
        "perturbed_question": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n    while b:\n        a, b = b, a%b\n    return abs(a)\n",
        "perturbed_answer": "abs can be removed\nbut anything works as long as it can improve the complexity",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Code Complexity",
        "category": "Cost Analysis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Analyze the time and space complexity regarding to each input parameter of the following function.",
        "perturbed_question": "\n\ndef function(a: int, b: int) -> int:\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "perturbed_answer": "Time O(logmin(a, b)). Space O(1)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Identical Code",
        "category": "Identical Solution",
        "dimension": "Pairwise Comparison",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Is function_1 and function_2 identical in terms of its functionality?",
        "perturbed_question": "Code 1:\ndef function(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a    \n\nCode 2:\ndef function(a: int, b: int) -> int:\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a",
        "perturbed_answer": "TRUE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Parameter Relationship",
        "category": "Value Relationship",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "If the below program output integer 7. What is the relationship between a and b",
        "perturbed_question": "def function(a: int, b: int) -> int:\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "perturbed_answer": "a = 7 * x, b = 7 * y, x and y are coprime",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Introduce Bias",
        "category": "Add Misinformation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(10, 35)\n    5\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "perturbed_answer": "\ndef gold_solution(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test_input": "test_case1: [10, 20]\ntest_case2: [100, 200]\ntest_case3: [13, 26]\ntest_case4: [0, 0]\ntest_case5: [1, 100]\ntest_case6: [-10, 20]\ntest_case7: [-10, -20]\ntest_case8: [0, 10]",
        "test_output": "test_case1: 10\ntest_case2: 100\ntest_case3: 13\ntest_case4: 0\ntest_case5: 1\ntest_case6: 10\ntest_case7: -10\ntest_case8: 10\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Test Case",
        "category": "Inherent Premise",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Provide input parameters for the test cases of the specified coding problem. These parameters should encompass boundary conditions within the scope defined by the function's requirements specification, and avoid scenarios that fall outside of these requirements.",
        "perturbed_question": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    ",
        "perturbed_answer": "Positive integers (typical scenario): Test the function with typical positive integer pairs.\n\nExample: (18, 24) Expected output: 6\nOne zero, one positive integer: Since the GCD of zero and any number is the number itself, this tests the function's ability to handle zeros.\n\nExample: (-8, 24) Expected output: 8\nExample: (-8, -12) Expected output: 4\nPrime numbers: This tests the function's handling of cases where the only common divisor is 1.\n\nExample: (13, 29) Expected output: 1\nOne number is a multiple of the other: This tests the function's handling of cases where one number is the exact multiple of the other.\n\nExample: (5, 20) Expected output: 5",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Solve Input",
        "category": "Solve Value",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find what are possible values of b, if the function output is: 5 and parameter a is 15",
        "perturbed_question": "\ndef function(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
        "perturbed_answer": "b must be a multiple of 5 but not multiple of 3",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Code Import",
        "category": "Domain Knowledge",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Answer the question below to process batch input and the computation can be parallelly computed using a n-core cpu",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n",
        "perturbed_answer": "from concurrent.futures import ThreadPoolExecutor\nfrom math import gcd  # Python's standard library gcd function\n\ndef compute_gcds(pairs):\n    \"\"\"Compute GCDs for each pair in the pairs list.\"\"\"\n    with ThreadPoolExecutor() as executor:\n        results = list(executor.map(lambda pair: gcd(*pair), pairs))\n    return results",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "No Keyword",
        "category": "Reasoning Format",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding function below without using python keywords: \"while\", \"for\" in the solution",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    ",
        "perturbed_answer": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b using recursion.\n    \"\"\"\n    # Base case: if b is 0, a is the GCD\n    if b == 0:\n        return a\n    # Recursive step: apply the Euclidean algorithm\n    return greatest_common_divisor(b, a % b)\none possible way of using recursion",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "X Language",
        "category": "Reasoning Style",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below in c++",
        "perturbed_question": "\nint greatest_common_divisor(int a, int b);",
        "perturbed_answer": "    int greatest_common_divisor(int a, int b) {\n        if(b == 0)\n            return abs(a);\n        else\n            return greatest_common_divisor(b, a % b);\n    }\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Simple Name",
        "category": "New Rule",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below and only use 1 letter for each variable names inside the solution",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    ",
        "perturbed_answer": "as long as all the variable names are 1 letter it is fine",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Step Necessity",
        "category": "Step Functionality",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Explain what is the the line below the comment functionality?",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:    \n        # Explain what is the functionality of the line below\n        return greatest_common_divisor(b, a % b)",
        "perturbed_answer": "Recursively calling itself using euclidean algorithm",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Alternative Answer",
        "category": "Alternative Answer",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Find an alternative way to complete for the following coding question correctly, your solution should be different from #Completion#.",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n#Completion#:\n    while b:\n        a, b = b, a % b\n    return a",
        "perturbed_answer": "Any alternative answer works other than euclidean algorithm",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Question Formulation",
        "category": "Question Formulation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Write a concise code description for the following code of its functionality no more than 1 sentence.",
        "perturbed_question": "\ndef function(a,b):\n    while b:\n        a, b = b, a % b\n    return a\n",
        "perturbed_answer": "formulation: Finding GCD",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Reverse Engineering",
        "category": "Backward Reasoning",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Create a function that reverses the following function's process, effectively transforming its output back into the original input, suppose if the value of a and b is the same\n",
        "perturbed_question": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
        "perturbed_answer": "def function(x):\n\n    return (x, x)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Parameter Sequence",
        "category": "Change Sequence",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def munchee_bunchee(xray: int, yoyo: int) -> int:\n\n    \"\"\" Return a common divisor that is the largest of two integers xray and yoyo\n    \"\"\"\n\n    \"\"\"\n    >>> munchee_bunchee(3, 5)\n    1\n    >>> munchee_bunchee(25, 15)\n    5\n    \"\"\"",
        "perturbed_answer": "\ndef gold_solution(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test_input": "test_case1: [100, 200]\ntest_case2: [50, 100]\ntest_case3: [13, 39]\ntest_case4: [48, 72]\ntest_case5: [201, 303]\ntest_case6: [2, 2]\ntest_case7: [-4, 12]\ntest_case8: [-4, -12]",
        "test_output": "test_case1: 100\ntest_case2: 50\ntest_case3: 13\ntest_case4: 24\ntest_case5: 3\ntest_case6: 2\ntest_case7: 4\ntest_case8: -4\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Incomplete Answer",
        "category": "Complete Missing",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below by predicting what is inside the masked code paragraph",
        "perturbed_question": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    [masked code paragraph]\n\n        b = a % b\n        a = temp\n\n    return a",
        "perturbed_answer": "def gold_solution(a: int, b: int) -> int:\n\n    while b != 0:\n        # Calculate the remainder of a divided by b.\n        temp = b\n        b = a % b\n        a = temp\n    \n    # At this point, b is 0, and a contains the GCD of the original numbers.\n    return a",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "True False",
        "category": "Close Format",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Evaluate whether the solution below is the correct solution for the coding question, True or False?",
        "perturbed_question": "Function:\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\nSolution:\n\n\n    while a:\n        a, b = a % b, a\n    return b",
        "perturbed_answer": "False, the final should return a",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Incomplete Requirement",
        "category": "Conditional Analysis",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def common_divisor(a: int, b: int) -> int:\n    \n    \"\"\" Return a common divisor of two integers a and b\n    \"\"\"",
        "perturbed_answer": "Did not specify which common divisor it should return, all return all?",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Wrong Example",
        "category": "Conflicting Information",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(10, 20)\n    10\n    >>> greatest_common_divisor(60, 100)\n    10\n    \"\"\"",
        "perturbed_answer": "The given example is wrong",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Runtime Error",
        "category": "Surface Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a // b \n    return a",
        "perturbed_answer": "it should be a % b",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Logical Error",
        "category": "Hidden Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b:\n        a, b = b, a % b \n    return b",
        "perturbed_answer": "the last one should return a",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Complex Docstring",
        "category": "Data Restructuring",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def function(a: int, b: int) -> int:\n\n    \"\"\" Yield the highest common factor, denoted as the greatest common divisor, \n    of two specified integers, identified herein as 'a' and 'b', through the \n    implementation of an algorithmic procedure designed to ascertain the largest \n    numerical value that divides both 'a' and 'b' without producing a remainder, \n    thereby establishing the maximal shared divisor by which both integers can be \n    evenly divided. \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"",
        "perturbed_answer": "\ndef gold_solution(a: int, b: int) -> int:\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "test_input": "test_case1: [20, 30]\ntest_case2: [15, 5]\ntest_case3: [11, 3]\ntest_case4: [24, 36]\ntest_case5: [101, 103]\ntest_case6: [1, 1]\ntest_case7: [-3, 9]\ntest_case8: [-3, -9]",
        "test_output": "test_case1: 10\ntest_case2: 5\ntest_case3: 1\ntest_case4: 12\ntest_case5: 1\ntest_case6: 1\ntest_case7: 3\ntest_case8: -3\n"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Theoretical Basis",
        "category": "Theoretical Basis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Please describe to me in simple terms, assuming I have no knowledge of programming. Your task isn't to solve the coding problem itself, but rather to identify the programming concepts in Python that would be necessary to address the problem presented below.",
        "perturbed_question": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "perturbed_answer": "Depend on the answer",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Example Requirement",
        "category": "Seek Clarification",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Begin by analyzing the function's behavior to understand its pattern, and then proceed to code the function accordingly.",
        "perturbed_question": "def function(a: int, b: int) -> int:\n\n    \"\"\"Examples: function(60, 48) == 12\nfunction(100, 25) == 25\nfunction(17, 13) == 1\nfunction(36, 24) == 12\nfunction(270, 192) == 6\nfunction(81, 153) == 9\nfunction(14, 49) == 7\n    \"\"\"",
        "perturbed_answer": "any function implements of gcd",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n\n\n    while b:\n        a, b = b, a % b\n    return a\n",
        "math_category": "Example Boundary",
        "category": "Complex Reality",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    \"\"\" Return the greatest common divisor of two integers a and b.\n\n    It calculates the greatest common divisor using the Euclidean algorithm.\n    It handles the case when either or both of the inputs are 0 and when both inputs are the same.\n    The implement function should pass all the test cases below\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(5, 0)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(7, 7)\n    7\n    >>> greatest_common_divisor(-7, 7)\n    7\n    \"\"\"",
        "perturbed_answer": "def gold_solution(a: int, b: int) -> int:\n\n    # Handle the case where either or both inputs are 0\n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n\n    while b != 0:\n        a, b = b, a % b\n\n    return a",
        "test_input": "test_case1: [0, 0]\ntest_case2: [0, 10]\ntest_case3: [10, 0]\ntest_case4: [10, 10]\ntest_case5: [-10, 10]\ntest_case6: [10, -10]\ntest_case7: [-10, -10]\ntest_case8: [100, 200]",
        "test_output": "test_case1: 0\ntest_case2: 10\ntest_case3: 10\ntest_case4: 10\ntest_case5: 10\ntest_case6: -10\ntest_case7: -10\ntest_case8: 100\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Restrict Requirement",
        "category": "Add Restriction",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3, will cube the integer entry if its index is a multiple of 4 and not a multiple of 3, and will raise the integer entry \n    to the power of 4 if its index is a multiple of 5 and not a multiple of 3 or 4. The function will not change the entries in the list \n    whose indexes are not a multiple of 3, 4, or 5. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3,4,5] the output should be 147\n    For lst = [] the output should be 0\n    For lst = [-1,-5,2,-1,-5,3] the output should be -45\n    \"\"\"",
        "perturbed_answer": "def gold_solution(lst):\n    total = 0\n    for ix, number in enumerate(lst):\n        if ix % 3 == 0:\n            total += number ** 2\n        elif ix % 4 == 0:\n            total += number ** 3\n        elif ix % 5 == 0:\n            total += number ** 4\n        else:\n            total += number\n    return total",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 15, 17, 19]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3, 4, 5, 6]]\ntest_case8: [[1, 2, 3, 4, 5, 6, 7, 8, 9]]",
        "test_output": "test_case1: 2329\ntest_case2: 595\ntest_case3: 130455661300\ntest_case4: 13801\ntest_case5: 0\ntest_case6: 0\ntest_case7: 1443\ntest_case8: 2229\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Further Requirement",
        "category": "Subsequent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def enhanced_sum_squares(lst):\n\n    \"\"\"\n    This function should take a list of integers. For all entries in the list, the function shall square the integer \n    entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a \n    multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. \n    This function should also calculate and return the sum of all entries, along with the average of all the modified entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be (1, 0)\n    For lst = []  the output should be (0, 0)\n    For lst = [-1,-5,2,-1,-5]  the output should be (-123, 0)\n    \"\"\"",
        "perturbed_answer": "def gold_solution(lst):\n    total_sum = sum_int = 0\n\n    if not lst:\n        return (0, 0)\n\n    for i, val in enumerate(lst):\n        sum_int += 1\n        if i % 3 == 0:\n            total_sum += val ** 2\n        elif i % 4 == 0:\n            total_sum += val ** 3\n        else:\n            total_sum += val\n           \n    return total_sum, total_sum / sum_int",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 13, 14, 15]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3]]\ntest_case8: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]",
        "test_output": "test_case1: (1039, 103.9)\ntest_case2: (-707, -70.7)\ntest_case3: (855661900, 85566190.0)\ntest_case4: (4942, 494.2)\ntest_case5: (0, 0.0)\ntest_case6: (0, 0)\ntest_case7: (6, 2.0)\ntest_case8: (6828, 341.4)\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Parallel Requirement",
        "category": "Concurrent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares_cubes(lst):\n\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. \n    Simultaneously, the function will double the integer entry if its index is a multiple of 5 and not a multiple of 3 or 4.\n    The function will not change the entries in the list whose indexes are not a multiple of 3, 4 or 5.\n    The function shall then return the sum of all entries and the total of doubled values.\n\n    Examples:\n    For lst = [1,2,3,4,5] should output (1, 0)\n    For lst = []  the output should be (0, 0)\n    For lst = [-1,-5,2,-1,-5,3]  the output should be (-123, 0)\n    \"\"\"",
        "perturbed_answer": "def gold_solution(lst):\n  square_cube_sum = 0\n  double_sum = 0\n  \n  for i in range(len(lst)):\n    if i % 3 == 0:\n      square_cube_sum += lst[i]**2\n    elif i % 4 == 0:\n      square_cube_sum += lst[i]**3\n    elif i % 5 == 0:\n      double_sum += lst[i]*2\n      square_cube_sum += lst[i]*2\n  return square_cube_sum, double_sum",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 13, 14, 15]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3]]\ntest_case8: [[1, 2, 3, 4, 5]]",
        "test_output": "test_case1: (1032, 12)\ntest_case2: (-700, -12)\ntest_case3: (855661200, 1200)\ntest_case4: (4925, 18)\ntest_case5: (0, 0)\ntest_case6: (0, 0)\ntest_case7: (1, 0)\ntest_case8: (142, 0)\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Remove Constraint",
        "category": "Remove Constraint",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3. The function shall then \n    return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -6\n    \"\"\"",
        "perturbed_answer": "def gold_solution(lst):\n    # initialize sum as 0\n    sum = 0\n    \n    # iterate through the list\n    for i in range(len(lst)):\n        # check if index is multiple of 3\n        if i % 3 == 0:\n            sum += lst[i]*lst[i]\n        else:\n            sum += lst[i]\n    \n    return sum",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 10, 13, 15, 17]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3, 4, 5, 6]]\ntest_case8: [[1, 2, 3, 4, 5, 6, 7, 8, 9]]",
        "test_output": "test_case1: 420\ntest_case2: 133\ntest_case3: 1663300\ntest_case4: 509\ntest_case5: 0\ntest_case6: 0\ntest_case7: 33\ntest_case8: 99\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Helper Function",
        "category": "Partial Solution",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below using helper function",
        "perturbed_question": "def helper_function(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] **= 2\n        elif i % 4 == 0:\n            lst[i] **= 3\n    return lst\n\n\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    You should use the helper function above to achieve the requirement\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    ",
        "perturbed_answer": "def helper_function(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] **= 2\n        elif i % 4 == 0:\n            lst[i] **= 3\n    return lst\n\ndef solution(lst):\n    lst = helper_function(lst)\n    return sum(lst)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Change Docstring",
        "category": "Change Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if the integer is a \n    multiple of 3 and will cube the integer entry if its integer is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 12\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -130\n    \"\"\"",
        "perturbed_answer": "def gold_solution(lst):\n\n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through the list of integers with their indexes\n    for idx, num in enumerate(lst):\n        # Check if the number is a multiple of 3\n        if num % 3 == 0:\n            total_sum += num ** 2\n        # Check if the index is a multiple of 4 and number is not a multiple of 3\n        elif idx % 4 == 0 and num % 3 != 0:\n            total_sum += num ** 3\n        # If the number does not meet the above conditions, add it as is\n        else:\n            total_sum += num\n    \n    return total_sum",
        "test_input": "test_case1: [[1, 2, 3]] \ntest_case2: [[-1, -2, -3]] \ntest_case3: [[100, 200, 300]] \ntest_case4: [[5, 7, 6, 11, 12, 9]]\ntest_case5: [[0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3, 4]]\ntest_case8: [[1, 2, 3, 4, 5, 6]]",
        "test_output": "test_case1: 12\ntest_case2: 6\ntest_case3: 1090200\ntest_case4: 404\ntest_case5: 0\ntest_case6: 0\ntest_case7: 16\ntest_case8: 177\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Example Detail",
        "category": "Detail Expansion",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6, For lst = [1,2,3], the first entry (1) is at index 0, which is a multiple of 3, so it's squared (1^2 = 1). The other entries' indexes are not multiples of 3 or 4, so they remain unchanged. Their sum is 1+2+3 = 6.\n\n    For lst = []  the output should be 0, For lst = [], there are no entries to modify, resulting in a sum of 0.\n\n    For lst = [-1,-5,2,-1,-5]  the output should be -126. For lst = [-1,-5,2,-1,-5], the entry at index 0 (a multiple of 3) is squared (-1^2 = 1), the entry at index 3 (also a multiple of 3) is squared (-1^2 = 1), and the entry at index 4 (a multiple of 4) is cubed (-5^3 = -125). The sum of all entries, including the unmodified ones, is 1-5+2+1-125 = -126.\n    \"\"\"\n",
        "perturbed_answer": "\ndef gold_solution(lst):\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \ntest_case2: [[-1, -2, -3, -4, -5]]\ntest_case3: [[100, 200, 300, 400, 500, 600]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 10]]\ntest_case5: [[0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3]]\ntest_case8: [[1, 2, 3, 4, 5, 6]]",
        "test_output": "test_case1: 1039\ntest_case2: -113\ntest_case3: 125171100\ntest_case4: 1970\ntest_case5: 0\ntest_case6: 0\ntest_case7: 6\ntest_case8: 153\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Parameter Content",
        "category": "Change Value",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def calculate_transformed_sum(character_list):\n    \"\"\"\n    This function computes the sum of values derived from the positions of characters in the English alphabet, applied to a list of characters.\n    The operation is as follows:\n    \n    - For each character in 'character_list':\n        - If the character's position in 'character_list' (1-indexed) is a multiple of 3, square its alphabetical position (A=1, B=2, etc.).\n        - If the character's position in 'character_list' is a multiple of 4 but not a multiple of 3, raise its alphabetical position to the power of 3.\n        - If the character's position in the list is neither a multiple of 3 nor 4, simply use its alphabetical position.\n\n    The function then returns the sum of these processed values for all characters in the list.\n\n    Examples:\n    - calculate_transformed_sum(['a', 'b', 'c', 'd', 'e']) should return 1 + 2 + 9 (since 'c' is squared) + 64 (since 'd' is cubed) + 5 = 81.\n    - calculate_transformed_sum(['x', 'y', 'z']) should return 725.\n    \"\"\"",
        "perturbed_answer": "def gold_solution(character_list):\n    total = 0\n    for i, ch in enumerate(character_list, start=1):\n        alphabetic_position = ord(ch.lower()) - ord('a') + 1\n        if i % 3 == 0:\n            total += alphabetic_position ** 2\n        elif i % 4 == 0:\n            total += alphabetic_position ** 3\n        else:\n            total += alphabetic_position\n    return total",
        "test_input": "test_case1: [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']]\ntest_case2: [['z', 'y', 'x', 'w']]\ntest_case3: [['d', 'e', 'f', 'g', 'h']]\ntest_case4: [['e', 'g', 'f', 'k', 'l', 'i', 'h']]\ntest_case5: [['a', 'a', 'a', 'a', 'a']]\ntest_case6: [[]]\ntest_case7: [['a', 'b', 'c']]\ntest_case8: [['a', 'b', 'c', 'd', 'e']]",
        "test_output": "test_case1: 727\ntest_case2: 12794\ntest_case3: 396\ntest_case4: 1480\ntest_case5: 5\ntest_case6: 0\ntest_case7: 12\ntest_case8: 81\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Variable Type",
        "category": "Change Operation",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst[int]) -> float:\n\n    \"\"\"\"\n    This function will take a list of values. For all entries in the list, the function shall square the value of the entry if its index is a \n    multiple of 3 and will cube the value of the entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n",
        "perturbed_answer": "def gold_solution(lst):\n    total = 0.0\n\n    for i, value in enumerate(lst):\n        value = float(value)\n\n        if i % 3 == 0:\n            total += value ** 2\n        elif i % 4 == 0:\n            total += value ** 3\n        else:\n            total += value\n        \n    return total",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 13, 14, 15]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3]]\ntest_case8: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]",
        "test_output": "test_case1: 1039.0\ntest_case2: -707.0\ntest_case3: 855661900.0\ntest_case4: 4942.0\ntest_case5: 0.0\ntest_case6: 0.0\ntest_case7: 6.0\ntest_case8: 6828.0\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Info Recombination",
        "category": "Info Recombination",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_modify(lst):\n    \"\"\"\n    This function will take a non-empty list of integers. \n    First, for all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and \n    will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. \n    Furthermore, If the original integer is a even number, divide it by two\n    The function shall then return the sum of all entries.  \n  \n    Examples:\n    For lst = [1,2,3] the output should be 5.0\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -127.0\n    \"\"\"",
        "perturbed_answer": "def gold_solution(lst):\n    total_sum = 0\n    for i, value in enumerate(lst):\n        # Determine operation based on index\n        if i % 3 == 0:\n            operation = 'square'\n        elif i % 4 == 0:\n            operation = 'cube'\n        else:\n            operation = None\n\n        # Check if the value is even and halve it if so\n        if value % 2 == 0:\n            value = value / 2\n\n        # Apply the operation\n        if operation == 'square':\n            value = value ** 2\n        elif operation == 'cube':\n            value = value ** 3\n        \n        total_sum += value\n    \n    return total_sum",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 13, 14, 15]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[1, 2, 3]]\ntest_case7: [[1, 2, 3, 4, 5]]\ntest_case8: [[-1, -5, 2, -1, -5]]",
        "test_output": "test_case1: 944.0\ntest_case2: -786.0\ntest_case3: 107165950.0\ntest_case4: 978.0\ntest_case5: 0.0\ntest_case6: 5.0\ntest_case7: 134.0\ntest_case8: -127.0\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Variable Range",
        "category": "Identify Range",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "What is the range for output values?",
        "perturbed_question": "\ndef sum_squares(lst):\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**4)\n        else:\n            result.append(lst[i]**6)\n    return sum(result)",
        "perturbed_answer": "output >= 0",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Variable Substitution",
        "category": "Variable Group",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst, multiple):\n\n    \"\"\"\"\n    This function will take a list of integers and a specific value. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of the specified value and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or the specified value. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3], multiple = 1 the output should be 36\n    For lst = [], multiple = 5  the output should be 0\n    For lst = [-1,-5,2,-1,-5], multiple = 2  the output should be -120\n    \"\"\"",
        "perturbed_answer": "def gold_solution(lst, multiple):\n    sum_val = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0:\n            sum_val += val ** 2\n        elif i % multiple == 0:\n            sum_val += val ** 3\n        else:\n            sum_val += val\n    return sum_val",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2]\ntest_case2: [[-1, -2, -3, -4], 1]\ntest_case3: [[100, 200, 300, 400, 500], 3]\ntest_case4: [[5, 7, 6, 11, 12, 9, 8], 4]\ntest_case5: [[0, 0, 0, 0, 0], 5]\ntest_case6: [[], 6]\ntest_case7: [[1, 2, 3], 1]\ntest_case8: [[1, 2, 3, 4, 5], 2]",
        "test_output": "test_case1: 1063\ntest_case2: -18\ntest_case3: 171000\ntest_case4: 1960\ntest_case5: 0\ntest_case6: 0\ntest_case7: 36\ntest_case8: 171\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "WhatIf Code",
        "category": "What If",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the `changed_function` if the input is the same. ",
        "perturbed_question": "We know if we input [1, 2, masked_digit] to the `original_function`, the output is 6\n\nHere is the `original_function`:\ndef original_function(lst):    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nHere is the `changed_function`:\ndef changed_function(lst):\n\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 2 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\nWhat will be the output for `change_function([1, 2, masked_digit])`",
        "perturbed_answer": "30",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Generalize Parameter",
        "category": "Computation Demand",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(obj[str, float, int]) -> str:\n\n    \"\"\"\"\n    This function will take a list of values, it can be float, integer, or string. if it is a string, the  value applies to the ASCII value of the characters. \nFor all entries in the list, the function shall square the value of the entry if its index is a \n    multiple of 3 and will cube the value of the entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \"\"\"\n    Examples:\n    For obj = [3, 2, 1] the output should be '12'\n    For obj = [\"a\", \"b\"]  the output should be '9507'\n    For obj = [4, \"d\", 2.0] the output should be 118.0\n    \"\"\"",
        "perturbed_answer": "def gold_solution(lst):\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if isinstance(value, str):\n            value = sum(ord(char) for char in value)\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n        else:\n            total_sum += value\n    return str(total_sum)",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 13, 14, 15]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case7: [[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]]\ntest_case8: [[1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10]]",
        "test_output": "test_case1: '1039'\ntest_case2: '-707'\ntest_case3: '855661900'\ntest_case4: '4942'\ntest_case5: '0'\ntest_case7: '2229583'\ntest_case8: '1339.4440000000002'\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Higher Order",
        "category": "General Solution",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def transform_and_sum_based_on_multiples(num_list1: list[int], num_list2: list[int]) -> int:\n    \"\"\"\n    Transforms each entry in num_list1 by raising it to the power of the corresponding num_list2 entry if the index of the num_list1 entry is a multiple of the num_list2 entry.\n    Returns the sum of all the transformed entries in num_list1.\n    Examples:\n    For num_list1 = [1, 2, 3, 4], num_list2 = [1, 2, 1, 4] the output should be 4\n    \"\"\"",
        "perturbed_answer": "def gold_solution(num_list1: list[int], num_list2: list[int]) -> int:\n    transformed_sum = 0\n    for index, num in enumerate(num_list1):\n        if index % num_list2[index] == 0:\n            transformed_sum += num ** num_list2[index]\n    return transformed_sum",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\ntest_case2: [[-1, -2, -3, -4], [1, 2, 3, 4]]\ntest_case3: [[100, 200, 300, 400, 500], [1, 2, 3, 4, 5]]\ntest_case4: [[5, 7, 6, 11, 12, 9, 8], [1, 2, 3, 4, 5, 6, 7]]\ntest_case5: [[0, 0, 0, 0, 0], [1, 2, 3, 4, 5]]\ntest_case6: [[], []]\ntest_case7: [[1, 2, 3], [1, 2, 3]]\ntest_case8: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]",
        "test_output": "test_case1: 1\ntest_case2: -1\ntest_case3: 100\ntest_case4: 5\ntest_case5: 0\ntest_case6: 0\ntest_case7: 1\ntest_case8: 1\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Solution Plan",
        "category": "Solution Plan",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Initialize an empty list to store the modified values\n\n    # Iterate over the list using indices to check conditions\n\n        # Check if the index i is a multiple of 3\n\n            # If true, append the square of the element at index i to the result list\n\n        # Check if the index i is a multiple of 4 but not a multiple of 3\n\n            # If true, append the cube of the element at index i to the result list\n\n\n            # If none of the above conditions are met, append the element as it is\n\n    # Return the sum of all elements in the result list\n\n",
        "perturbed_answer": "If the implementation follows the plan:\n    sum = 0\n    for i, v in enumerate(lst):\n        if i%3 == 0:\n            sum += v*v \n        elif i%4 == 0:\n            sum += v*v*v\n        else:\n            sum+= v\n    return sum",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Code Execution",
        "category": "Symbolic Response",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the following function, if the input is:lst = [1, 2, 3, 4, 5, 6]",
        "perturbed_question": "\ndef function(lst):\n\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "153",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Realworld Usecase",
        "category": "Setting Rephrase",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def calculate_special_sum(data):\n\n    \"\"\"\n    Imagine you are analyzing a list of data points, where each point is represented by an integer. In your analysis, \n    you're interested in the sum of these data points, but with a twist. If the position of a data point in the list \n    (i.e., its index) is a multiple of 3, then you need to square that data point. If the position is a multiple of 4 \n    but not a multiple of 3, then this data point needs to be cubed. For other data points whose position does not \n    meet either condition, just leave them be. This function, calculate_special_sum, is designed to take a list of \n    data points and return the sum as per the aforementioned rules. \n    \"\"\"",
        "perturbed_answer": "def gold_solution(data):\n    special_sum = 0\n    for i in range(len(data)):\n        if i % 3 == 0:\n            special_sum += data[i] ** 2\n        elif i % 4 == 0:\n            special_sum += data[i] ** 3\n        else:\n            special_sum += data[i]\n          \n    return special_sum",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 10, 13, 14, 15]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3]]\ntest_case8: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]",
        "test_output": "test_case1: 1260\ntest_case2: -707\ntest_case3: 855661900\ntest_case4: 4378\ntest_case5: 0\ntest_case6: 0\ntest_case7: 6\ntest_case8: 1039\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Reduce Complexity",
        "category": "Optimize Solution",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Optimize the code below to more efficiently achive the same requirement specified in the docstring",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers. It squares the entry if its index is a \n    multiple of 3 and cubes the entry if its index is a multiple of 4 but not a multiple of 3.\n    It leaves other entries unchanged. The function then returns the sum of all entries.\n    \"\"\"\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Code Complexity",
        "category": "Cost Analysis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Analyze the time and space complexity regarding to input parameter string of the following function.",
        "perturbed_question": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers. It squares the entry if its index is a \n    multiple of 3 and cubes the entry if its index is a multiple of 4 but not a multiple of 3.\n    It leaves other entries unchanged. The function then returns the sum of all entries.\n    \"\"\"\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum",
        "perturbed_answer": "Time complexity O(n), space complexity O(1)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Identical Code",
        "category": "Identical Solution",
        "dimension": "Pairwise Comparison",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Is function_1 and function_2 identical in terms of its functionality?",
        "perturbed_question": "Code 1:\ndef sum_squares(lst):\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\nCode 2:\ndef sum_squares(lst):\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "TRUE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Parameter Relationship",
        "category": "Value Relationship",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "If the input to the program is [x, y, z] and output of the program is 0. what is the relationship between x, y, z?",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "x^2 + y + z = 0",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Introduce Bias",
        "category": "Add Misinformation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = [4,5,6]  the output should be 27\n    For lst = [7,8,9]  the output should be 66\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "\ndef gold_solution(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 13, 14, 15]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3]]\ntest_case8: [[1, 2, 3, 4, 5]]",
        "test_output": "test_case1: 1039\ntest_case2: -707\ntest_case3: 855661900\ntest_case4: 4942\ntest_case5: 0\ntest_case6: 0\ntest_case7: 6\ntest_case8: 147\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Test Case",
        "category": "Inherent Premise",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Provide input parameters for the test cases of the specified coding problem. These parameters should encompass boundary conditions within the scope defined by the function's requirements specification, and avoid scenarios that fall outside of these requirements.",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    ",
        "perturbed_answer": "test case must incldue lists of length 0, 1, 3, 4, more, and also test list with negative numbers",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Solve Input",
        "category": "Solve Value",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the shortest list of integers that, when input into the following function, results in an output of 15.",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "[5]",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Code Import",
        "category": "Domain Knowledge",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Rewrite and optimize the function below to use the multicore cpu.",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "from concurrent.futures import ProcessPoolExecutor, as_completed\nimport os\n\ndef process_chunk(chunk):\n    \"\"\"Process a chunk of the list, applying the specified operations.\"\"\"\n    sum_chunk = 0\n    for idx, value in chunk:\n        if idx % 3 == 0 and idx % 4 != 0:\n            sum_chunk += value ** 2\n        elif idx % 4 == 0:\n            sum_chunk += value ** 3\n        else:\n            sum_chunk += value\n    return sum_chunk\n\ndef sum_squares(lst):\n    \"\"\"Sum squares and cubes of list elements based on their indices, in parallel.\"\"\"\n    # Determine the number of workers based on the number of available CPU cores\n    workers = min(32, max(1, os.cpu_count() - 1))  # Reserve one core for the main thread\n    \n    # Split the list into chunks along with their original indices\n    chunk_size = max(1, len(lst) // workers)  # Ensure at least one item per chunk\n    chunks = [(i, lst[i]) for i in range(len(lst))]\n    chunks = [chunks[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]\n    \n    # Use ProcessPoolExecutor to process each chunk in parallel\n    total_sum = 0\n    with ProcessPoolExecutor(max_workers=workers) as executor:\n        futures = [executor.submit(process_chunk, chunk) for chunk in chunks]\n        for future in as_completed(futures):\n            total_sum += future.result()\n    \n    return total_sum",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "No Keyword",
        "category": "Reasoning Format",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding function below without using python keyword 'for'",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    ",
        "perturbed_answer": "def sum_squares_recursive(lst, index=0):\n    # Base case: if the index is out of range of the list\n    if index >= len(lst):\n        return 0\n    \n    # Apply the transformation based on the index and accumulate the sum\n    if index % 3 == 0 and index != 0:\n        result = lst[index] ** 2\n    elif index % 4 == 0:\n        result = lst[index] ** 3\n    else:\n        result = lst[index]\n    \n    # Recursive call to process the next index, accumulating the sum\n    return result + sum_squares_recursive(lst, index + 1)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "X Language",
        "category": "Reasoning Style",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below in javascript",
        "perturbed_question": "\nfunction sum_squares(lst) {\n\n    /*\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    */\n    \n    /*\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    */\n}",
        "perturbed_answer": "```javascript\nfunction sum_squares(lst) {\n    // Initialize the sum \n    var sum = 0;\n  \n    // Loop over every element in the list \n    for(var i=0; i<lst.length; i++){\n        // If the index is a multiple of 3 \n        if(i % 3 == 0){\n            // Square the entry\n            sum += Math.pow(lst[i], 2);\n        }\n        // Else, if the index is a multiple of 4 but not a multiple of 3 \n        else if(i % 4 == 0){\n            // Cube the entry\n            sum += Math.pow(lst[i], 3);\n        } \n        // If the index is not a multiple of 3 or 4, add the unmodified entry\n        else {\n            sum += lst[i];\n        }\n    }\n  \n    // Return the sum\n    return sum;\n}\n```",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Simple Name",
        "category": "New Rule",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below and only use two compund word (e.g. word1_word2 ) for each variable names inside the solution. ",
        "perturbed_question": "\ndef sum_squares(input_lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    ",
        "perturbed_answer": "The each variable name is two compound word",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Step Necessity",
        "category": "Step Functionality",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Explain what is the the line below the comment functionality?",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        # Explain what is the functionality of the line below (elif i % 4 == 0:)?\n        elif i % 4 == 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)",
        "perturbed_answer": "check if its index is a multiple of 4 and not a multiple of 3.",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Alternative Answer",
        "category": "Alternative Answer",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Find an alternative way to complete for the following coding question correctly, your solution should be different from #Completion#.",
        "perturbed_question": "Find an alternative solution for the following coding question\n\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n#Completion#:\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)",
        "perturbed_answer": "Any alternative answer works",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Question Formulation",
        "category": "Question Formulation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Write a concise code description for the following code of its functionality no more than 3 sentences.",
        "perturbed_question": "def function(lst):\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "As long as it is concise description it works",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Reverse Engineering",
        "category": "Backward Reasoning",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Create a function that reverses the following function's process, effectively transforming its output back into the original input. Suppose all the elements in the lst are equal, and length of the list is 4\n",
        "perturbed_question": "def sum_squares(lst):    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "perturbed_answer": "def reverse_sum_squares(output):\n    # Coefficients for the quadratic equation\n    a = 2\n    b = 2\n    c = -output\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is non-negative, as we're dealing with real numbers\n    if discriminant >= 0:\n        # Calculate the two possible solutions\n        n1 = (-b + sqrt(discriminant)) / (2*a)\n        n2 = (-b - sqrt(discriminant)) / (2*a)\n        \n        # Since we're dealing with a real-world problem, we choose the solution that makes sense\n        # In this case, both solutions could be valid depending on the value of output\n        # But we generally expect n to be a single value that was squared and added\n        return n1, n2",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Parameter Sequence",
        "category": "Change Sequence",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def absquatulate_mcguffins(wibble_brolly):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall will cube the integer entry if its index is a multiple of 4 and not a multiple of 3 and square the integer entry if its index is a \n    multiple of 3 and  The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    Examples:\n    For wibble_brolly = [1,2,3] the output should be 6\n    For wibble_brolly = []  the output should be 0\n    For wibble_brolly = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"",
        "perturbed_answer": "\ndef gold_solution(lst):\n\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 10]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3, 4, 5, 6, 7]]\ntest_case8: [[1, 2, 3, 4, 5, 6, 7, 8, 9]]",
        "test_output": "test_case1: 1062\ntest_case2: -78\ntest_case3: 125661900\ntest_case4: 1970\ntest_case5: 0\ntest_case6: 0\ntest_case7: 202\ntest_case8: 939\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Incomplete Answer",
        "category": "Complete Missing",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below by predicting what is inside the masked code paragraph",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n\n    [masked code paragraph]\n    result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)",
        "perturbed_answer": "\ndef gold_solution(lst):\n\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "True False",
        "category": "Close Format",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Evaluate whether the solution below is the correct solution for the coding question, True or False?",
        "perturbed_question": "Function:\n\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nSolution:\n\n\ndef sum_squares(lst):\n    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            result += i**2\n        elif i % 4 == 0:\n            result += i**3\n        else:\n            result += i\n    return result",
        "perturbed_answer": "TRUE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Incomplete Requirement",
        "category": "Conditional Analysis",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"",
        "perturbed_answer": "Did not specify what to do if the item if the index if a multiple of both 3 and 4",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Wrong Example",
        "category": "Conflicting Information",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    For lst = [1,2] the output should be 7.\n    \"\"\"\n",
        "perturbed_answer": "The given example is wrong",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Runtime Error",
        "category": "Surface Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i%3 === 0:\n            result.append(i**2)\n        elif i%4 == 0 and i%3.0 != 0:\n            result.append(i**3)\n        else:\n            result.append(lst[i])\n    output = sum(result)",
        "perturbed_answer": "two errors: 1. if i%3 === 0 should only have two equal sign. 2. no return statement\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Logical Error",
        "category": "Hidden Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i%3 == 0:\n            result.append(i**2)\n        elif i%4 == 0 and i%3 != 0:\n            result.append(i**3)\n        else:\n            result.append(lst[i])\n    return sum(result)",
        "perturbed_answer": "i ** 2 should be list[i] ** 2 and i ** 3 should be list[i] ** 3",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Complex Docstring",
        "category": "Data Restructuring",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\n    This function is designed to operate on a collection of integers, meticulously \n    processing each element based on its positional index within the array. \n    Specifically, the algorithm will square the value of any integer located at an \n    index that is a multiple of 3, thereby amplifying its magnitude in a quadratic \n    fashion. Concurrently, if an integer's positional index is exclusively a multiple of \n    4, distinct from those that are simultaneously multiples of 3, this function will \n    elevate the integer to its cubic power, further augmenting its value through a \n    triadic multiplication process. Integral values situated at indices that do not \n    conform to these specific multiples will remain untouched, preserving their \n    original state. Upon completion of these conditional transformations, the \n    function is engineered to aggregate the altered and unaltered elements of the \n    array, culminating in the computation of their collective sum, which it will \n    subsequently return as the final output of its execution. \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\"\"\"",
        "perturbed_answer": "def gold_solution(lst):\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 13, 14]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3, 4, 5, 6]]\ntest_case8: [[1, 2, 3, 4, 5, 6, 7, 8]]",
        "test_output": "test_case1: 1062\ntest_case2: -78\ntest_case3: 125661900\ntest_case4: 4717\ntest_case5: 0\ntest_case6: 0\ntest_case7: 153\ntest_case8: 210\n"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Theoretical Basis",
        "category": "Theoretical Basis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Please describe to me in simple terms, assuming I have no knowledge of programming. Your task isn't to solve the coding problem itself, but rather to identify the programming concepts in Python that would be necessary to address the problem presented below.",
        "perturbed_question": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "perturbed_answer": "Depend on the answer",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Example Requirement",
        "category": "Seek Clarification",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Begin by analyzing the function's behavior to understand its pattern, and then proceed to code the function accordingly.",
        "perturbed_question": "def sum_squares(lst):\n\n    \"\"\"\"\nfunction([2] * 1) == 4\nfunction([2] * 2) == 6\nfunction([2] * 3) == 8\nfunction([2] * 4) == 12\nfunction([2] * 5) == 20\nfunction([2] * 6) == 22\nfunction([2] * 7) == 26\nfunction([2] * 8) == 28\nfunction([2] * 9) == 36\nfunction([2] * 10) == 40\nfunction([2] * 11) == 42\nfunction([2] * 12) == 44\nfunction([2] * 13) == 48\n    \"\"\"",
        "perturbed_answer": "Identify the requirement of the solution",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef sum_squares(lst):\n\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    \n    \"\"\"\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "math_category": "Example Boundary",
        "category": "Complex Reality",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def sum_squares(lst):\n\n\"\"\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nThe function must pass the following example test cases\nExamples:\n\n    - For lst = [1, 2, 3],\n      The output should be  6\n\n    - For lst = [], an empty list, the output should be None\n\n\"\"\"",
        "perturbed_answer": "\ndef gold_solution(lst):\n\n    if len(lst) == 0: return None\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "test_input": "test_case1: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]] \ntest_case2: [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]]\ntest_case3: [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]] \ntest_case4: [[5, 7, 6, 11, 12, 9, 8, 10, 13, 14]]\ntest_case5: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntest_case6: [[]]\ntest_case7: [[1, 2, 3]]\ntest_case8: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]",
        "test_output": "test_case1: 1260\ntest_case2: -707\ntest_case3: 855661900\ntest_case4: 4363\ntest_case5: 0\ntest_case6: None\ntest_case7: 6\ntest_case8: 1039\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Restrict Requirement",
        "category": "Add Restriction",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string, num):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets and an integer 'num'.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least 'num' brackets in the subsequence are nested. \n    If no such subsequence exists, the function should return False.\n    Examples\n\n    is_nested('[[]]', 2) \u279e True\n    is_nested('[]]]]]]][[[[[]', 3) \u279e False\n    is_nested('[][]', 2) \u279e False\n    is_nested('[]', 1) \u279e True\n    is_nested('[[][]]', 4) \u279e False\n    is_nested('[[]][[', 2) \u279e True\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string, num):\n    depth = 0\n    max_depth = 0\n    if num <= 0: return True\n    for char in string:\n        if char == '[':\n            depth += 1\n            max_depth = max(depth, max_depth)\n        elif char == ']':\n            depth -= 1\n            depth = max(0, depth)\n            if max_depth - depth > num-1:\n                return True\n            if depth == 0:\n                max_depth = 0\n    return False\n",
        "test_input": "test_case1: ('[[]]', 2)\ntest_case2: ('[]]]]]]][[[[[]', 3)\ntest_case3: ('[][]', 2)\ntest_case4: ('[]', 1)\ntest_case5: ('[[][]]', 4)\ntest_case6: ('[[]][[', 2)\ntest_case7: ('[[[[[]', 4)\ntest_case8: ('', 0)",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: False\ntest_case4: True\ntest_case5: False\ntest_case6: True\ntest_case7: False\ntest_case8: True\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Further Requirement",
        "category": "Subsequent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets. The function should return True if and only if there exists a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested. Additionally,\n    the function should also return the number of valid nested bracket pairs found in the string.\n\n    is_nested('[[]]', True) \u279e (True, 1)\n    is_nested('[]]]]]]][[[[[]', True) \u279e (False, 0)\n    is_nested('[][]', True) \u279e (False, 0)\n    is_nested('[]', True) \u279e (False, 0)\n    is_nested('[[][]]', True) \u279e (True, 1)\n    is_nested('[[]][[][]]', True) \u279e (True, 2)\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    depth = 0\n    max_depth = 0\n    count = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            depth += 1\n            max_depth = max(depth, max_depth)\n        elif char == ']':\n            depth -= 1\n            depth = max(0, depth)\n            if max_depth - depth > 1:\n                count += 1\n            if depth <= 0:\n                max_depth = 0\n\n    return count > 0, count",
        "test_input": "test_case1: [\"[[]]\"]\ntest_case2: [\"[]]]]]]][[[[[]\"]\ntest_case3: [\"[][]\"]\ntest_case4: [\"[]\"]\ntest_case5: [\"[[][]]\"]\ntest_case6: [\"[[]][[][]]\"]\ntest_case7: [\"[[[[[]\"]\ntest_case8: [\"[[[[]\"]",
        "test_output": "test_case1: (True, 1)\ntest_case2: (False, 0)\ntest_case3: (False, 0)\ntest_case4: (False, 0)\ntest_case5: (True, 1)\ntest_case6: (True, 2)\ntest_case7: (False, 0)\ntest_case8: (False, 0)\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Parallel Requirement",
        "category": "Concurrent Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets, and a boolean flag print_nested_sequence. \n    The function should return True if and only if there is a valid subsequence of brackets where at least one bracket in the subsequence\n    is nested. The function should also print the first valid nested bracket subsequence, if one exists, otherwise empty string\n    \n    is_nested('[[]]', True) \u279e (True, '[[]]')\n    is_nested('[]]]]]]][[[[[]', True) \u279e (False, '')\n    is_nested('[][]', True) \u279e (False, '')\n    is_nested('[]', True) \u279e (False, '')\n    is_nested('[[][]]', True) \u279e (True, '[[][]]')\n    is_nested('[[]][[', True) \u279e (True, '[[]]')\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    def get_index(string):\n        depth = 0\n        max_depth = 0\n        for i, char in enumerate(string):\n            if char == '[':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            elif char == ']':\n                depth -= 1\n                depth = max(0, depth)\n                if max_depth - depth > 1:\n                    return i+1\n                if depth == 0:\n                    max_depth = 0\n        return 0\n    def swap(string):\n        swap_dict = {'[': ']', ']': '['}\n        swapped_string = ''.join([swap_dict[char] if char in swap_dict else char for char in string])\n        return swapped_string[::-1]\n    index = get_index(string)\n    string = string[:index]\n    string = swap(string)\n    index = get_index(string)\n    string = string[:index]\n    string = swap(string)\n    return len(string) > 0, string\n",
        "test_input": "test_case1: [\"[[]]\"]\ntest_case2: [\"[]]]]]]][[[[[]\"]\ntest_case3: [\"[][]\"]\ntest_case4: [\"[]\"]\ntest_case5: [\"[[][]]\"]\ntest_case6: [\"[[]][[\"]\ntest_case7: [\"\"]\ntest_case8: [\"[[[[[]\"]",
        "test_output": "test_case1: (True, '[[]]')\ntest_case2: (False, '')\ntest_case3: (False, '')\ntest_case4: (False, '')\ntest_case5: (True, '[[][]]')\ntest_case6: (True, '[[]]')\ntest_case7: (False, '')\ntest_case8: (False, '')\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Remove Constraint",
        "category": "Remove Constraint",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n  \"\"\"\n  Make a function that takes a string consisting only of square brackets. If the string \n  contains at least one valid bracket, the function should output True.\n\n  is_nested('[[]]') \u279e True\n  is_nested('[]]]]]]][[[[[]') \u279eTrue\n  is_nested(']) \u279e True\n  \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    depth = 0\n    max_depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n            max_depth = max(depth, max_depth)\n        elif char == ']':\n            depth -= 1\n            depth = max(0, depth)\n            if max_depth - depth > 0:\n                return True\n            if depth == 0:\n                max_depth = 0\n    return False\n",
        "test_input": "test_case1: ('[][][][]',)\ntest_case2: ('[',) \ntest_case3: ('[[[',) \ntest_case4: ('',) \ntest_case5: (']',) \ntest_case6: ('[[[[]',) \ntest_case7: ('[]]]]]]][[[[[]',) \ntest_case8: ('[[][]',)",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: False\ntest_case4: False\ntest_case5: False\ntest_case6: True\ntest_case7: True\ntest_case8: True\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Helper Function",
        "category": "Partial Solution",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below using helper function",
        "perturbed_question": "def handle_open_bracket(depth, max_depth):\n    depth += 1\n    max_depth = max(depth, max_depth)\n    return depth, max_depth\ndef handle_close_bracket(depth, max_depth):\n    depth -= 1\n    depth = max(0, depth)\n    if max_depth - depth > 1:\n        return depth, max_depth, True\n    if depth == 0:\n        max_depth = 0\n    return depth, max_depth, False\ndef is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    You should use the helper function above to achieve the requirement\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n",
        "perturbed_answer": "def gold_solution(string):\n    depth = 0\n    max_depth = 0\n    for char in string:\n        if char == '[':\n            depth, max_depth = handle_open_bracket(depth, max_depth)\n        elif char == ']':\n            depth, max_depth, early_return = handle_close_bracket(depth, max_depth)\n            if early_return:\n                return True\n            # No need to check depth == 0 here, it's handled in `handle_close_bracket`\n    return False",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Change Docstring",
        "category": "Change Question",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Construct a function that takes a string as input where the string only contains rectangular brackets.\n    The function should return the longest contiguous nested bracket subsequence within that string. If there are multiple subsequences of the same maximum length, return the first one encountered. \n    is_nested('[[]]') \u279e '[[]]'\n    is_nested('[]]]]]]][[[[[]') \u279e '[]'\n    is_nested('[][]') \u279e '[]'\n    is_nested('[]') \u279e '[]'\n    is_nested('[[][]]') \u279e '[[][]]'\n    is_nested('[[]][[') \u279e '[[]]'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    max_length = 0\n    stack = []\n    longest_string = ''\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append(i)\n        elif char == ']':\n            if len(stack) > 0:\n                start_index = stack.pop()\n                end_index = i + 1\n                length = end_index - start_index\n                if length > max_length:\n                    max_length = length\n                    longest_string = string[start_index:end_index]\n    return longest_string",
        "test_input": "test_case1: ('[][][][]',)\ntest_case2: ('[',) \ntest_case3: ('[[[',) \ntest_case4: ('',) \ntest_case5: (']',) \ntest_case6: ('[[[[]',) \ntest_case7: ('[]]]]]]][[[[[]',) \ntest_case8: (']][[][[]]][[[]]',)",
        "test_output": "test_case1: '[]'\ntest_case2: ''\ntest_case3: ''\ntest_case4: ''\ntest_case5: ''\ntest_case6: '[]'\ntest_case7: '[]'\ntest_case8: '[[][[]]]'\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Example Detail",
        "category": "Detail Expansion",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    is_nested('[[]]') \u279e True '[[]]' \u279e True: Contains a nested pair of brackets.\n    is_nested('[]]]]]]][[[[[]') \u279e False '[]]]]]]][[[[[]' \u279e False: Lacks a correctly nested structure due to imbalanced bracket pairs.\n    is_nested('[][]') \u279e False '[][]' \u279e False: Consists of adjacent, non-nested pairs.\n    is_nested('[]') \u279e False '[]' \u279e False: Only a single pair, no nesting possible.\n    is_nested('[[][]]') \u279e True '[[][]]' \u279e True: The entire sequence is nested within outer brackets.\n    is_nested('[[]][[') \u279e True '[[]][[' \u279e True: Begins with a nested structure, indicating at least one set of nested brackets.\n\n\"\"\"\n",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "test_input": "test_case1: ('[[]]', )\ntest_case2: ('[]]]]]]][[[[[]', )\ntest_case3: ('[][]', )\ntest_case4: ('[]', )\ntest_case5: ('[[][]]', )\ntest_case6: ('[[]][[', )\ntest_case7: ('[[[[[]', )\ntest_case8: (']][[][[]]][[[]]', )",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: False\ntest_case4: False\ntest_case5: True\ntest_case6: True\ntest_case7: False\ntest_case8: True\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Parameter Content",
        "category": "Change Value",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only curly brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    is_nested('{{}}) \u279e True\n    is_nested('{}}}}}}{{{{{{{}') \u279e False\n    is_nested('{}{}') \u279e False\n    is_nested('{}') \u279e False\n    is_nested('{{}{}}') \u279e True\n    is_nested('{{}}}{{') \u279e True\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '{':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == '}':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False\n\n",
        "test_input": "test_case1: ['{{}}']\ntest_case2: ['{}}}}}}{{{{{{{}']\ntest_case3: ['{}{}']\ntest_case4: ['{}']\ntest_case5: ['{{}{}}']\ntest_case6: ['{{}}}{{']\ntest_case7: ['']\ntest_case8: ['{{{{}}}}']",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: False\ntest_case4: False\ntest_case5: True\ntest_case6: True\ntest_case7: False\ntest_case8: True\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Variable Type",
        "category": "Change Operation",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(list) -> str:\n\n    \"\"\"\n    Create a function that takes a list as input which contains only square brackets.\n    The function should return 'True' if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested(['[', '[', ']', ']']) \u279e 'True'\n    is_nested(['[', ']', ']', ']', ']', ']', ']', '[', '[', '[', '[', '[', ']', ']', ') \u279e 'False'\n    is_nested(['[', ']', '[', ']']) \u279e 'False'\n    is_nested(['[', ']']) \u279e 'False'\n    is_nested(['[', '[', ']', ']', '[', ']', ']']) \u279e 'True'\n    is_nested(['[', '[', ']', ']', '[', '[', ') \u279e 'True'\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '{':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == '}':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return 'True'\n            if len(stack) == 0:\n                depth = 0\n    return 'False'\n\n",
        "test_input": "test_case1: [\"['[', '[', ']', ']']\"]\ntest_case2: [\"['[', ']', ']', ']', ']', ']', ']', '[', '[', '[', '[', '[', ']', ']', ')']\"]\ntest_case3: [\"['[', ']', '[', ']']\"]\ntest_case4: [\"['[', ']']\"]\ntest_case5: [\"['[', '[', ']', ']', '[', ']', ']']\"]\ntest_case6: [\"['[', '[', ']', ']', '[', '[', ')']\"]\ntest_case7: [\"['[', ']', ']', ']', ']', ']', ']', '[', '[', '[', '[', '[', ']', ']', ')', '[', '[', ']', ']', '[', ']', ']']\"]\ntest_case8: [\"['[', '[', ']', ']', '[', '[', ')', '[', ']', '[', ']']\"]",
        "test_output": "test_case1: 'False'\ntest_case2: 'False'\ntest_case3: 'False'\ntest_case4: 'False'\ntest_case5: 'False'\ntest_case6: 'False'\ntest_case7: 'False'\ntest_case8: 'False'\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Info Recombination",
        "category": "Info Recombination",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string, lst):\n    \"\"\"\n    Create a function that merges two functionalities. \n    First, it should take a string as input which contains only square brackets. \n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \n    if True, the function should also return the number of open square brackets that are in even positions of the list.\n    if False, the function should also return the number of close square brackets that are in the odd positions of the list.\n    Note: The positions of the elements are assumed to start from 0\n    \n    Example:\n    super_solution('[[]]') \u279e (True, 1)\n    super_solution('[]]]]]]][[[[[]') \u279e (False, 5)\n    super_solution('[]') \u279e (False, 1)\n    super_solution('[[][]]') \u279e (True, 1)\n    super_solution('[[]][[') \u279e (True, 2)\n    \"\"\"",
        "perturbed_answer": "\ndef gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True, sum([o == '[' for o in string[::2]])\n            if len(stack) == 0:\n                depth = 0\n    return False, sum([o == ']' for o in string[1::2]])",
        "test_input": "test_case1: ('[[]]',)\ntest_case2: ('[]]]]]]][[[[[]',)\ntest_case3: ('[]', )\ntest_case4: ('[[][]]', )\ntest_case5: ('[[]][[', )\ntest_case6: ('', )\ntest_case7: ('[[[[]', )\ntest_case8: ('[[[[[]', )",
        "test_output": "test_case1: (True, 1)\ntest_case2: (False, 5)\ntest_case3: (False, 1)\ntest_case4: (True, 1)\ntest_case5: (True, 2)\ntest_case6: (False, 0)\ntest_case7: (False, 0)\ntest_case8: (False, 1)\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Variable Range",
        "category": "Identify Range",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "If the input contains '[[]]]', what will be the possible output value for this function? ",
        "perturbed_question": "def function(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "perturbed_answer": "TRUE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Variable Substitution",
        "category": "Variable Group",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(brackets, x):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least x bracket in the subsequence is nested.\n\n    is_nested('[[]]', 1) \u279e True\n    is_nested('[]]]]]]][[[[[]', 1) \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string, num):\n    depth = 0\n    max_depth = 0\n    if num <= 0: return True\n    for char in string:\n        if char == '[':\n            depth += 1\n            max_depth = max(depth, max_depth)\n        elif char == ']':\n            depth -= 1\n            depth = max(0, depth)\n            if max_depth - depth > num-1:\n                return True\n            if depth == 0:\n                max_depth = 0\n    return False\n",
        "test_input": "test_case1: ('[[]]', 1)\ntest_case2: ('[]]]]]]][[[[[]', 1)\ntest_case3: ('[][]', 0)\ntest_case4: ('[]', 0)\ntest_case5: ('[[][]]', 1)\ntest_case6: ('[[]][[', 2)\ntest_case7: ('[[[[[]', 1)\ntest_case8: ('', 0)",
        "test_output": "test_case1: True\ntest_case2: True\ntest_case3: True\ntest_case4: True\ntest_case5: True\ntest_case6: True\ntest_case7: True\ntest_case8: True\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "WhatIf Code",
        "category": "What If",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the `function`, if the input doubles. ",
        "perturbed_question": "We know that if we feed input string masked_input to the following `function`, the output is False. \ndef function(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False\n\nWhat will the output for `function(2*masked_input)`",
        "perturbed_answer": "The output may be False, and maybe True if ']][['",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Generalize Parameter",
        "category": "Computation Demand",
        "dimension": "Computation Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(input_data):\n\n    \"\"\"\n    Create a function that takes a string or list as input.\n    If the input is a string it should contain only square brackets.\n    If the input is a list, they should contain only square brackets as elements.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    is_nested(['[', ']', '[][]']) \u279e False\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "test_input": "test_case1: [['[', ']', '[][]']]\ntest_case2: ['[][][][]']\ntest_case3: [['[', ']', '[', ']', '[', ']', '[', ']', '[', ']']]\ntest_case4: ['[']\ntest_case5: ['[', '[', '[']\ntest_case6: ['']\ntest_case7: [['[', '[', '[', '[', '[', ']']]\ntest_case8: [['[', '[', '[', '[', '[', ']', ']']]",
        "test_output": "test_case1: False\ntest_case2: False\ntest_case3: False\ntest_case4: False\ntest_case6: False\ntest_case7: False\ntest_case8: True\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Higher Order",
        "category": "General Solution",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Create a function that can analyze a string consisting of multiple types of brackets such as square, round or curly. \n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    For example,\n\n    is_nested('[{}(())]') \u279e True\n    is_nested('[<>]]]]]][[[[<>(])') \u279e False\n    is_nested('<>[]{}()') \u279e False\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    bracket_dict = {'[':']', '{':'}', '(':')', '<':'>'}\n    for i, char in enumerate(string):\n        if char in '[{(<':\n            stack.append(char)\n            if depth > 0:\n                depth -= 1\n        elif char in ']})>':\n            if len(stack) > 0:\n                ope = stack.pop()\n                if bracket_dict[ope] == char:\n                    depth += 1\n                else:\n                    depth = 0\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "test_input": "test_case1: ('[{}(())]',)\ntest_case2: ('[<>]]]]]][[[[<>(])', )\ntest_case3: ('<>[]{}()', )\ntest_case4: ('[[][]', )\ntest_case5: ('[[[[]', )\ntest_case6: ('[]]]]]]][[[[[]', )\ntest_case7: (']][[][[]]][[[]]', )\ntest_case8: ('[[]][[', )",
        "test_output": "test_case1: True\ntest_case2: True\ntest_case3: False\ntest_case4: False\ntest_case5: False\ntest_case6: False\ntest_case7: True\ntest_case8: True\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Solution Plan",
        "category": "Solution Plan",
        "dimension": "Question Simplification",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n\n    # Initialize an empty stack to keep track of opening brackets\n    # Initialize a depth variable to keep track of potential nesting\n    # Iterate through each character in the input string\n    # If an opening bracket is found, add it to the stack\n    # Decrease depth if it's greater than 0 (this seems intended to track closing brackets, but it's a bit misplaced)\n    # If a closing bracket is found and the stack is not empty, remove the last opening bracket\n    # Increase depth to indicate a closing bracket was found\n    # If depth is greater than or equal to 2, return True (indicating nested brackets were found)\n    # If the stack is empty, reset depth to 0 (attempting to reset for a new potential sequence)\n    # If the function hasn't returned True by now, it means no nested brackets were found\n",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "test_input": "test_case1: ['[[]]']\ntest_case2: ['[]]]]]]][[[[[]']\ntest_case3: ['[][]']\ntest_case4: ['[]']\ntest_case5: ['[[][]]']\ntest_case6: ['[[]][[']\ntest_case7: ['[[[[]']\ntest_case8: ['[[[[[]']",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: False\ntest_case4: False\ntest_case5: True\ntest_case6: True\ntest_case7: False\ntest_case8: False\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Code Execution",
        "category": "Symbolic Response",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Find the output of the following function, if the input is:string = \"[[][[]\"",
        "perturbed_question": "def function(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "perturbed_answer": "FALSE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Realworld Usecase",
        "category": "Setting Rephrase",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def check_if_bracket_sequence_is_nested(sequence):\n\n    \"\"\"\n    Assume you are building an application that processes structured text data. One of its components involves\n    detecting whether given sequences of square brackets are properly nested or not. You need to create a function\n    that accepts a sequence containing only square brackets, and whether there exists a valid nested sequence.\n    In this context, a nested sequence is one where at least one pair of brackets is contained within another pair. and you do not care about rest of the string is valid\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "test_input": "test_case1: ['[][][][]']\ntest_case2: ['[[][]]']\ntest_case3: ['[[]][[[]]']\ntest_case4: ['']\ntest_case5: ['[[[[[]']\ntest_case6: ['[']\ntest_case7: ['[[[']\ntest_case8: ['[]]]]]]][[[[[]']",
        "test_output": "test_case1: False\ntest_case2: True\ntest_case3: True\ntest_case4: False\ntest_case5: False\ntest_case6: False\ntest_case7: False\ntest_case8: False\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Reduce Complexity",
        "category": "Optimize Solution",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Optimize the code below to more efficiently achive the same requirement specified in the docstring",
        "perturbed_question": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    stack = []\n    depth = 0\n    # Use a less obvious name for the irrelevant variable\n    temp_counter = 0  # Seems like it might be used for counting, but it's not\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n            # Manipulate the temp_counter in a way that seems meaningful but isn't\n            temp_counter = i % 2  # Changes the value based on even/odd index\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n                # Adjust temp_counter within a loop, seemingly tracking something\n                temp_counter += 1\n                temp_counter -= 1  # Increment and then decrement, no net effect\n    # Another piece of code that blends in but is ultimately irrelevant\n    final_check = temp_counter * 0  # Multiplying by zero, ensuring it's unused\n    return False\n",
        "perturbed_answer": "temp_counter variable is useless. \n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Code Complexity",
        "category": "Cost Analysis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Analyze the time and space complexity regarding to input parameter string of the following function.",
        "perturbed_question": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "perturbed_answer": "Time complexity O(n), space complexity O(n)",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Identical Code",
        "category": "Identical Solution",
        "dimension": "Pairwise Comparison",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "To solve the following function requirement, are those two code identical? \n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"",
        "perturbed_question": "def solution1(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False\n\ndef solution2(string):\n    depth = 0\n    max_depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n            max_depth = max(depth, max_depth)\n        elif char == ']':\n            depth -= 1\n            depth = max(0, depth)\n            if max_depth - depth > 1:\n                return True\n            if depth == 0:\n                max_depth = 0\n    return False",
        "perturbed_answer": "TRUE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Parameter Relationship",
        "category": "Value Relationship",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "If the input string to the program have a length of four and output of the program is True. what are possible input values?",
        "perturbed_question": "def program(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "perturbed_answer": "[[]]'",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Introduce Bias",
        "category": "Add Misinformation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there exists a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested inside the string.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    \"\"\"\n\n   ",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "test_input": "test_case1: [\"[[]]\"]\ntest_case2: [\"[][]\"]\ntest_case3: [\"[]\"]\ntest_case4: [\"[[][]]\"]\ntest_case5: [\"[][][][]\"]\ntest_case6: [\"[][[][]\"]\ntest_case7: [\"[[[[]\"]\ntest_case8: [\"]][[][[]]][[[]]\"]",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: False\ntest_case4: True\ntest_case5: False\ntest_case6: False\ntest_case7: False\ntest_case8: True\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Test Case",
        "category": "Inherent Premise",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Provide input parameters for the test cases of the specified coding problem. These parameters should encompass boundary conditions within the scope defined by the function's requirements specification, and avoid scenarios that fall outside of these requirements.",
        "perturbed_question": "\ndef is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \"\"\"\n\n",
        "perturbed_answer": "1. Nested bracket\n2. Valid brakets, but not nested\n3. Invalid brackets but nested.",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Solve Input",
        "category": "Solve Value",
        "dimension": "Symbolic Manipulation",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Give the shortest input string to the following function, for which the output is: True",
        "perturbed_question": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "perturbed_answer": "[[]]'",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Code Import",
        "category": "Domain Knowledge",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Rewrite the function below to take in batch input parameter and use the multicore cpu.",
        "perturbed_question": "\ndef is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "perturbed_answer": "\n```python\nimport multiprocessing\n\nclass NestedChecker:\n    def is_nested(self, string):\n        stack = []\n        depth = 0\n        for i, char in enumerate(string):\n            if char == '[':\n                stack.append('[')\n                if depth > 0:\n                    depth -= 1\n            elif char == ']':\n                if len(stack) > 0:\n                    stack.pop()\n                    depth += 1\n                if depth >= 2:\n                    return True\n                if len(stack) == 0:\n                    depth = 0\n        return False\n\n    def apply(self, data_list):\n        with multiprocessing.Pool() as pool:\n            results = pool.map(self.is_nested, data_list)\n        return results\n```\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "No Keyword",
        "category": "Reasoning Format",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding function below without using for loop",
        "perturbed_question": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n",
        "perturbed_answer": "as long as there is no 'for' in the answer. for example:\ndef is_nested(string):\n    stack = []\n    depth = 0\n    i = 0\n    while i < len(string):\n        char = string[i]\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n        i += 1\n    return False\n\n",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "X Language",
        "category": "Reasoning Style",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below in c++",
        "perturbed_question": "// Function Description:\n//    Create a function that takes a string as input which contains only square brackets.\n//    The function should return True if and only if there is a valid subsequence of brackets \n//    where at least one bracket in the subsequence is nested.\n//\n// Examples:\n//    is_nested('[[]]') \u279e True\n//    is_nested('[]]]]]]][[[[[]') \u279e False\n//    is_nested('[][]') \u279e False\n//    is_nested('[]') \u279e False\n//    is_nested('[[][]]') \u279e True\n//    is_nested('[[]][[') \u279e True\n\nbool is_nested(std::string s);\n",
        "perturbed_answer": "#include <iostream>\n#include <stack>\nusing namespace std;\n\nbool is_nested(const string& input) {\n    stack<char> stack;\n    int depth = 0;\n    for (char ch : input) {\n        if (ch == '[') {\n            stack.push('[');\n            if (depth > 0) {\n                depth -= 1;\n            }\n        } else if (ch == ']') {\n            if (!stack.empty()) {\n                stack.pop();\n                depth += 1;\n            }\n            if (depth >= 2) {\n                return true;\n            }\n            if (stack.empty()) {\n                depth = 0;\n            }\n        }\n    }\n    return false;\n}",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Simple Name",
        "category": "New Rule",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Answer the coding question below and only use capital letter word for each variable names inside the solution",
        "perturbed_question": "\ndef is_nested(String):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n",
        "perturbed_answer": "As long as the variables names begin with capital letters",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Step Necessity",
        "category": "Step Functionality",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Explain what is the the line below the comment functionality?",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            # Explain what is the functionality of the line below ( if len(stack) == 0:) ?\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "perturbed_answer": "Check if whether need to reset the depth to 0",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Alternative Answer",
        "category": "Alternative Answer",
        "dimension": "Answer Constraint",
        "domain": "Format Constraint",
        "aspect": "Representational Perturbation",
        "instruction": "Find an alternative way to complete for the following coding question correctly, your solution should be different from #Completion#.",
        "perturbed_question": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n#Completion#:\n\n    stack = []\n    depth = 0\n    i = 0\n    while i < len(string):\n        char = string[i]\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n        i += 1\n    return False",
        "perturbed_answer": "As long as it is a correct alternative solution",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Question Formulation",
        "category": "Question Formulation",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "What is the application scenario of the function below and provide 3 examples to the function",
        "perturbed_question": "def function(string):\n    stack = []\n    depth = 0\n    i = 0\n    while i < len(string):\n        char = string[i]\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n        i += 1\n    return False",
        "perturbed_answer": "Check if there is nested brackets in the sequence",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Parameter Sequence",
        "category": "Change Sequence",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def square_bracket_sequenceChecker(bracket_sequence):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    square_bracket_sequenceChecker('[[]]') \u279e True\n    square_bracket_sequenceChecker('[]]]]]]][[[[[]') \u279e False\n    square_bracket_sequenceChecker('[][]') \u279e False\n    square_bracket_sequenceChecker('[]') \u279e False\n    square_bracket_sequenceChecker('[[][]]') \u279e True\n    square_bracket_sequenceChecker('[[]][[') \u279e True\n\"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    i = 0\n    while i < len(string):\n        char = string[i]\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n        i += 1\n    return False",
        "test_input": "test_case1: ['[[]]']\ntest_case2: ['[]]]]]]][[[[[]']\ntest_case3: ['[][]']\ntest_case4: ['[]']\ntest_case5: ['[[][]]']\ntest_case6: ['[[]][[']\ntest_case7: ['']\ntest_case8: ['[[[[[]']",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: False\ntest_case4: False\ntest_case5: True\ntest_case6: True\ntest_case7: False\ntest_case8: False\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Incomplete Answer",
        "category": "Complete Missing",
        "dimension": "Question Understanding",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Complete the function below by predicting what is inside the masked code paragraph",
        "perturbed_question": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    stack = []\n    depth = 0\n    i = 0\n    [masked code paragraph]\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n        i += 1\n    return False",
        "perturbed_answer": "    while i < len(string):\n        char = string[i]",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "True False",
        "category": "Close Format",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Evaluate whether the solution below is the correct solution for the coding question, True or False?",
        "perturbed_question": "Function:\n\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\nSolution:\n\n    n = len(string)\n    for i in range(n):\n        if string[i] == '[':\n            for j in range(i+1, n):\n                if string[j] == ']':\n                    return True\n    return False",
        "perturbed_answer": "FALSE",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Incomplete Requirement",
        "category": "Conditional Analysis",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \"\"\"\n\n",
        "perturbed_answer": "The function did not specify what to return if the isn't a valid sequence of brackets where at least one bracket in the sequence is nested.",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Wrong Example",
        "category": "Conflicting Information",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e False\n    is_nested('[][]') \u279e True\n    is_nested('[]') \u279e True\n    is_nested('[[][]]') \u279e False\n    is_nested('[[]][[') \u279e False\n    \"\"\"",
        "perturbed_answer": "Examples are wrong",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Runtime Error",
        "category": "Surface Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "def gold_solution(string):\n    stack = []\n    depth = 0\n    i = 0\n    while i < len(string):\n        char = string[i]\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth =+ 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n        i += 1\n    return False",
        "perturbed_answer": "`=+ should be +=",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Logical Error",
        "category": "Hidden Error",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Debug the error in the following code",
        "perturbed_question": "\ndef is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n\n    stack = []\n    depth = 0\n    i = 0\n    while i < len(string):\n        char = string[i]\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth =+ 1\n            if depth >= 3:\n                return True\n            if len(stack) == 0:\n                depth = 0\n        i += 1\n    return False",
        "perturbed_answer": "It should be >= 2 rather than 3",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Complex Docstring",
        "category": "Data Restructuring",
        "dimension": "Alternative Format",
        "domain": "Format Change",
        "aspect": "Representational Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Construct a methodological function that accepts a singular string \n    parameter, characterized exclusively by the presence of square brackets. This \n    function is meticulously engineered to evaluate and return a Boolean value of \n    True solely under the condition that within the given string, there exists at least \n    one valid subsequence of these brackets wherein a minimum of one bracket is \n    distinctly nested within another, thereby fulfilling the criteria for a nested \n    bracket sequence.\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n    return False",
        "test_input": "test_case1: ['[[]]']\ntest_case2: ['[]]]]]]][[[[[]']\ntest_case3: ['[][]']\ntest_case4: ['[]']\ntest_case5: ['[[][]]']\ntest_case6: ['[[]][[']\ntest_case7: ['[[[[]']\ntest_case8: ['[[[[[]']",
        "test_output": "test_case1: True\ntest_case2: False\ntest_case3: False\ntest_case4: False\ntest_case5: True\ntest_case6: True\ntest_case7: False\ntest_case8: False\n"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Theoretical Basis",
        "category": "Theoretical Basis",
        "dimension": "Solution Evaluation",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Please describe to me in simple terms, assuming I have no knowledge of programming. Your task isn't to solve the coding problem itself, but rather to identify the programming concepts in Python that would be necessary to address the problem presented below.",
        "perturbed_question": "def is_nested(string):\n\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"",
        "perturbed_answer": "Depend on the answer",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Example Requirement",
        "category": "Seek Clarification",
        "dimension": "Error Debugging",
        "domain": "Concept Analysis",
        "aspect": "Structural Perturbation",
        "instruction": "Begin by analyzing the function's behavior to understand its pattern, and then proceed to code the function accordingly.",
        "perturbed_question": "def is_nested(string):\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n    ",
        "perturbed_answer": "Requirement specified inside the function",
        "test_input": "nan",
        "test_output": "nan"
    },
    {
        "original_function": "\ndef is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\"\"\"\n\n\"\"\"\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n\"\"\"\n\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n",
        "math_category": "Example Boundary",
        "category": "Complex Reality",
        "dimension": "Reasoning Adjustment",
        "domain": "Logic Alteration",
        "aspect": "Structural Perturbation",
        "instruction": "Generate a python function that fulfills the requirement below.",
        "perturbed_question": "def is_nested(string):\n\n\"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    Sample Input: \n    - Test an empty case:\n        is_nested('') \u279e False\n    - Test a single square bracket case:\n        is_nested('[') \u279e False\n        is_nested(']') \u279e False\n    - Test a single pair of matched square brackets case:\n        is_nested('[]') \u279e False\n    - Test a single pair of nested square brackets:\n        is_nested('[[]]') \u279e True\n    - Test a case where brackets are not properly matched:\n        is_nested('[]]][]') \u279e False\n    - Test a case with no nested brackets:\n        is_nested('[][]') \u279e False\n    - Test a case with multiple pairs of nested brackets:\n        is_nested('[[[]]]') \u279e True\n    - Test a case with multiple separate pairs of nested brackets:\n        is_nested('[[]][[') \u279e True\n\"\"\"\n",
        "perturbed_answer": "def gold_solution(string):\n    stack = []\n    depth = 0\n    i = 0\n    while i < len(string):\n        char = string[i]\n        if char == '[':\n            stack.append('[')\n            if depth > 0:\n                depth -= 1\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n                depth += 1\n            if depth >= 2:\n                return True\n            if len(stack) == 0:\n                depth = 0\n        i += 1\n    return False",
        "test_input": "test_case1: ('',)\ntest_case2: ('[',)\ntest_case3: (']',)\ntest_case4: ('[]',)\ntest_case5: ('[[]]',)\ntest_case6: ('[]]][]',)\ntest_case7: ('[][]',)\ntest_case8: ('[[[]]]',)",
        "test_output": "test_case1: False\ntest_case2: False\ntest_case3: False\ntest_case4: False\ntest_case5: True\ntest_case6: False\ntest_case7: False\ntest_case8: True\n"
    }
]